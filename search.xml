<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何友好的处理js错误</title>
      <link href="2021/03/21/try-catch/"/>
      <url>2021/03/21/try-catch/</url>
      
        <content type="html"><![CDATA[<p>  写过程序的同学都是到，有时候我们在熬夜调试一些代码有多么沮丧，最后当你发现问题是你忽略的简单逗号或类似的东西时，我都可以肯定会笑出声来。但是，客户报的bug将带来更多的皱眉而不是微笑。</p><p>  话虽如此，错误可能令人烦恼，而背后却是真正的痛苦。有什么可以让用户体验好，不会看着像科幻里一样包一堆乱码，尤其是客户端，这就是我想解释一下JavaScript中称为try / catch的东西。</p><h2 id="什么是JavaScript中的try-catch"><a href="#什么是JavaScript中的try-catch" class="headerlink" title="什么是JavaScript中的try/catch"></a>什么是JavaScript中的try/catch</h2><p>try/catch块基本上是用来在JavaScript处理错误的。当你不希望脚本中的错误阻塞代码时，可以使用考虑使用它。</p><p>尽管看起来好像可以使用if语句轻松完成这些事情，但是try/catch 除了可以完成if/else语句可以完成的工作外，还为你带来很多好处。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...你的代码</span>  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...你的代码</span>  <span class="token punctuation">}</span></code></pre><p>使用try语句可以测试代码块是否存在错误，并且不会阻塞代码执行。例如：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">try</span><span class="token punctuation">{</span>     <span class="token function">getListData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// getListData is not defined </span>  <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>这就是构造try/catch的方式。你将代码放在try块中，如果出现错误，JavaScript会立即控制catch语句，并按照你的代码执行。在这种情况下，它会警告你该错误。</p><p>所有JavaScript错误实际上都是包含两个属性的对象：名称（例如，Error，syntaxError等）和实际错误信息。这就是为什么当e发出警报时，会得到类似ReferenceError的错误：undefined getListData。</p><p>与JavaScript中的所有其他对象一样，你可以决定以不同的方式显示错误提示，例如e.name（ReferenceError）和e.message。</p><p>但老实说，这与JavaScript的功能并没有真正的不同。那么，try / catch语句的好处是什么？</p><h2 id="如何使用try-catch语句"><a href="#如何使用try-catch语句" class="headerlink" title="如何使用try/catch语句"></a>如何使用try/catch语句</h2><h4 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h4><p>  try/catch的优点之一是它能够显示你自己的自定义创建的错误。这称为抛错(throw error)。<br>  在你不希望JavaScript显示这种晦涩难懂的情况下，可以使用throw语句抛出错误（异常）。该错误可以是字符串，布尔值或对象。如果有错误，catch语句将显示你抛出的错误。（用户就不会看到乱码了，这样用户的反感情绪也不会那么大了）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> num <span class="token operator">=</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"输入一个大于30小于40的数字"</span><span class="token punctuation">)</span><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"不是一个数字(☉｡☉)!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"数字大于40了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"数字小于30了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>这是自定义的错误，这些我们在写代码的时候基本已经做了友好的判断了，更多的是我们在业务中无法预料的错误，通过将错误与JavaScript构造函数错误一起抛出，我们可以更进一步。</p><p>基本上，JavaScript将错误分为六类：</p><ul><li>EvalError - eval函数中发生错误。</li><li>RangeError - 发生了超出范围的数字。</li><li>ReferenceError - 使用尚未声明的变量</li><li>SyntaxError - 出现语法错误时抛出;</li><li>TypeError - 你使用的值超出预期类型的​​范围;</li><li>URI（统一资源标识符）错误-如果你在URI函数中使用非法字符，则会引发URIError。</li></ul><p>因此，有了这一切，我们很容易引发类似的错误throw Error。在这种情况下，错误的名称将为Error，并且消息catch里。你甚至可以继续创建自己的自定义错误构造函数，例如：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token function">getDataList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">EvalError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">RangeError</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>而且，你可以轻松地在任何地方使用此功能throw new Error();<br>我们已经了解了try/catch及其如何防止脚本阻塞，但实际上取决于具体情况。让我们看下面这个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span> <span class="token punctuation">}</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"最终的执行"</span><span class="token punctuation">)</span></code></pre><p>但是当你尝试使用try语句时，它仍然不起作用。这是因为JavaScript中有两种主要类型的错误；<code>解析时错误</code>和<code>运行时错误或异常</code>；</p><p><code>解析时错误</code>是代码内部发生的错误，主要是因为引擎无法解析代码。</p><p>例如，从上面看，JavaScript无法理解花括号的含义，因此，你的try/catch在这里没有作用。</p><p><code>运行时错误</code>是在有效代码中发生的错误，而这些正是try/catch必将发现的错误。 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span><span class="token punctuation">{</span>   test <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"x参数未定义"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"程序正常"</span><span class="token punctuation">)</span></code></pre><p>上面的代码是有效的，并且try/catch会捕获到运行时的错误。</p><h3 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h3><p><code>Finally</code>标识没有错之后执行的代码，或者捕获错误后该怎么执行，他是你的try/catch块最后一条语句。<br>对于finally，你基本上是说，无论try/catch中发生什么（错误或没有错误），finally语句中的此代码都会运行。例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> test <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"test为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"我时最后一条语句"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="嵌套try块"><a href="#嵌套try块" class="headerlink" title="嵌套try块"></a>嵌套try块</h2><p>你也可以嵌套try块，但是与JavaScript中的其他所有嵌套（例如if，for等）一样，它往往变得笨拙且不可读，因此，我建议你不要这样做。<br>嵌套try块为你提供了将一个catch语句用于多个try语句的优势。当然你也可以决定为每个try块编写一个catch语句，如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ex error '</span><span class="token operator">+</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>在这种情况下，外部try块不会有任何错误，因为它没有错。该错误来自内部try块，并且它已经处理了（它具有自己的catch语句）。</p><p>像这样面考虑的问题：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'inner catch error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面的代码的工作原理略有不同：错误发生在内部try块中，没有catch语句，但是出现了finally语句。</p><p>需要注意的是try/catch语句可以用三种不同的方式来写：try…catch，try…finally，try…catch…finally，但错误是这种内在的。</p><p>这种内部尝试的最后声明肯定会起作用，因为就像我们前面说过的那样，无论try / catch中发生什么，它都可以起作用。但是，即使外部尝试没有错误，也仍然可以控制捕获以记录错误。甚至更好的是，它使用我们在内部try语句中创建的错误，因为该错误来自那里。</p><p>如果我们要为外部尝试创建一个错误，它将仍然显示所创建的内部错误，但内部错误会捕获到自己的错误。</p><p>你可以通过注释掉内部错误代码来使用下面的代码。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'内部 error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//comment this catch out</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"外部 error"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="重新抛出错误"><a href="#重新抛出错误" class="headerlink" title="重新抛出错误"></a>重新抛出错误</h2><p>catch语句实际上捕获了所有发生的错误，有时我们可能不希望这样。例如，</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span> <span class="token keyword">let</span> x<span class="token operator">=</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">" 请输入一个小于 5 的数字 "</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">try</span><span class="token punctuation">{</span>   y<span class="token operator">=</span>x<span class="token number">-10</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">" y 不小于 5"</span><span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>假设输入的数字小于5（“使用严格”的目的是指示代码应在“严格模式”下执行）。在严格模式下，不能使用未声明的变量。</p><p>我希望try语句不会引发y的错误（当y的值大于5时，这几乎是不可能的）。上面的错误应该是因为y不小于输入的数字，并且不是y是undefined。</p><p>在这种情况下，你可以检查错误的名称，如果不是你想要的名称，则将其重新抛出：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span> <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">"请输入一个小于 5 的数字"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">{</span>  y<span class="token operator">=</span>x<span class="token number">-10</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">>=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"YYYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">ReferenceError</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">throw</span> e  <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre><p>这将简单地将错误重新抛出，以供另一个try语句在此处捕获阻塞脚本继续执行。当你只想监视特定类型的错误，而由于疏忽可能发生错误导致代码报错，此功能很有用。</p><h2 id="适合使用try-catch的场景"><a href="#适合使用try-catch的场景" class="headerlink" title="适合使用try/catch的场景"></a>适合使用try/catch的场景</h2><p>因此，不要把判断 null ，undefined，这种都用try catch 。<br>而是尽量用在不可知的错误捕获上，而不是未知的错误。比如用来捕获宿主对象或者ECMAScript抛出的异常。</p><p>NodeJS里大多数error都是用来处理异常的，因为异常是不可避免的，例如数据库挂了，网络错误，你虽然知道有可能，但是不知道何时发生，这些异常你需要捕捉或者传给上层。而错误处理，则是一些基本的判定，可以从代码级别避免其发生，可预知可推测，如果发生了，不是系统问题，而是你的程序有bug了。</p><p>对于NodeJS来说，两种错误都时刻需要注意，特别是系统错误，因为不可预知，需要大量代码来catch错误，传递错误，最后统一处理。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>到这里我们的try/catch就解释完了，基本包含了常用到的场景。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 D3.js 创建可交互的柱状图</title>
      <link href="2021/02/20/CSS-D3/"/>
      <url>2021/02/20/CSS-D3/</url>
      
        <content type="html"><![CDATA[<h2 id="D3-js-是什么？"><a href="#D3-js-是什么？" class="headerlink" title="D3.js 是什么？"></a>D3.js 是什么？</h2><p>D3.js 是一个可以基于数据来操作文档的 JavaScript 库。</p><blockquote><p>“D3 可以帮助你使用 HTML, CSS, SVG 以及 Canvas 来展示数据。D3 遵循现有的 Web 标准，可以不需要其他任何框架独立运行在现代浏览器中，它结合强大的可视化组件来驱动 DOM 操作。” - <a href="https://d3js.org/">d3js.org</a></p></blockquote><p><strong>首先考虑为什么要用 D3.js 创建图表？为什么不只显示图片呢？</strong></p><p>图表是基于第三方资源的信息，在渲染时需要动态可视化。此外，SVG 是一个非常强大的工具，非常适合这个应用场景。</p><p>让我们先看看 SVG 有什么好。</p><h2 id="SVG-的优点"><a href="#SVG-的优点" class="headerlink" title="SVG 的优点"></a>SVG 的优点</h2><p>SVG 代表可缩放矢量图形，从技术上讲，这是一种基于 XML 的标记语言。</p><p>它通常用于绘制矢量图形，比如线条和形状或修改现有图像。</p><p>优点:</p><ul><li>支持所有主流浏览器；</li><li>有 DOM 接口，不需要第三方库；</li><li>可伸缩，可保持高分辨率；</li><li>和其他图像格式相比，体积更小。</li></ul><p>缺点:</p><ul><li>只能显示二维图像；</li><li>学习曲线长；</li><li>对于计算密集型操作，渲染可能需要很长时间。</li></ul><p>SVG 尽管有缺点，但它仍是显示图标，logo，插图或者此文提及的图表的优良工具。</p><h2 id="开始使用-D3-js"><a href="#开始使用-D3-js" class="headerlink" title="开始使用 D3.js"></a>开始使用 D3.js</h2><p>我选择以柱状图作为开始，因为它代表了一个低复杂度的视觉元素，同时它还能教会 D3.js 本身的基本应用。没骗你，D3 提供了一套很棒的可视化数据的工具。看看它的 <a href="https://github.com/d3/d3/wiki/Gallery">github page</a> 页面，欣赏一些非常好的用例！</p><p>柱状图可以是水平或垂直的，取决于它的方向。我们从垂直的柱状图开始。</p><!-- 在这个图表中，我将根据 Stack Overlow 2018年[开发者调查结果](https://insights.stackoverflow.com/survey/2018/#technology-most-loved-dreaded-and-wanted-languages)显示前十个最受欢迎的编程语言。 --><h2 id="画起来！"><a href="#画起来！" class="headerlink" title="画起来！"></a>画起来！</h2><p>SVG 的坐标系从左上角开始(0;0)。正 x 轴向右，正 y 轴向下。因此，在计算元素的 y 坐标时，必须考虑 SVG 的高度。</p><p><img src="https://www.hualigs.cn/image/603cdc9f665b9.jpg" alt="axis"></p><p>背景知识差不多了，让我们撸代码吧！</p><p>我想创建一个宽1000像素、高600像素的图表。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">const</span> margin <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> width <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> margin<span class="token punctuation">;</span>    <span class="token keyword">const</span> height <span class="token operator">=</span> <span class="token number">600</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> margin<span class="token punctuation">;</span>    <span class="token keyword">const</span> svg <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>以上代码片段中，我用 d3 <code>select</code> 选择了 HTML 创建的 <code>&lt;svg&gt;</code> 元素。此选择方法接收各种类型的<code>选择器字符串</code>并返回第一个匹配元素。如果想获取所有匹配元素，使用 <code>selectAll</code>。</p><p>我还定义了一个边距值，它给图表提供了一点间距。间距也可以应用到 <code>&lt;g&gt;</code> 元素上，通过 <code>translate</code> 移动期望的值。从现在起，我将在这个分组中绘制，确保与页面其它内容保持合理的间距。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> chart <span class="token operator">=</span> svg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>往元素添加属性就像调用 <code>attr</code> 方法一样简单。方法的第一个参数接收用于所选 DOM 元素的属性。第二个参数是属性值或返回其值的回调函数。以上代码简单将图表的原点移到 SVG 的 (60;60) 位置。</p><h2 id="D3-js-支持的数据源格式"><a href="#D3-js-支持的数据源格式" class="headerlink" title="D3.js 支持的数据源格式"></a>D3.js 支持的数据源格式</h2><p>要开始绘图，我需要定义使用的数据源。本教程中，我使用了一个简单的 JavaScript 数组，该数组保存了语言名称及其所占百分比率的对象，但是这里着重提到一点，D3.js 支持多种数据格式。</p><p>该库具备从 XMLHttpRequest，.csv 文件，文本文件等数据源加载数据的内置功能。每一种数据源都可能包含 D3.js 可用的数据，最重要的是把它们构建成数组。注意，从<code>版本5.0</code>开始，D3 库使用 Promise 取代回调来加载数据，这是一次不向后兼容的更改。</p><h2 id="缩放，坐标轴"><a href="#缩放，坐标轴" class="headerlink" title="缩放，坐标轴"></a>缩放，坐标轴</h2><p>让我们继续讨论图表的坐标轴。为了画 y 轴，我需要设定最小和最大值，分别设置为0和100。</p><!-- *本教程中，我正在研究使用百分比，但是除了数字之外，还有其他数据类型的实用函数，我将在后面解释。* --><p>我必须将图表的高度在这两个值之间均分。为此，我创建了一个缩放函数。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> yScale <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleLinear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span>height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>线性缩放是最常见的缩放类型。它将连续输入范围转换为连续输出范围。请注意 <code>range</code> 和 <code>domain</code> 方法。第一个 <code>range</code> 方法取的长度应该在 <code>domain</code> 的边界值之间。</p><p>记住，SVG 坐标系从左上角开始，这就是为什么 <code>range</code> 将高度作为第一个参数而不是零。</p><p>在左侧创建一个坐标轴跟添加另一个分组一样简单，调用 d3 的 <code>axisLeft</code> 方法，并把缩放函数作为参数。</p><pre class=" language-js"><code class="language-js">chart<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span><span class="token function">axisLeft</span><span class="token punctuation">(</span>yScale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>现在，继续添加 x 轴。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> xScale <span class="token operator">=</span> d3<span class="token punctuation">.</span><span class="token function">scaleBand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">domain</span><span class="token punctuation">(</span>sample<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>chart<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`translate(0, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span><span class="token function">axisBottom</span><span class="token punctuation">(</span>xScale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://www.hualigs.cn/image/603cdd408bde2.jpg" alt=""></p><p>请注意，我使用 <a href="https://github.com/d3/d3-scale#scaleBand">scaleBand</a> 方法创建 x 轴，它将 x 轴 分成多段，并且使用余下的间隙计算柱状图的坐标和宽度。</p><p>D3.js 还能处理许多其他日期类型。<a href="https://github.com/d3/d3-scale#scaleTime">scaleTime</a> 与 <a href="https://github.com/d3/d3-scale#scaleLinear">scaleLinear</a> 非常相似，只是这里的 domain 是一个日期数组。</p><h2 id="使用-D3-js-绘制柱状图"><a href="#使用-D3-js-绘制柱状图" class="headerlink" title="使用 D3.js 绘制柱状图"></a>使用 D3.js 绘制柱状图</h2><p>想想我们需要什么样的输入来画柱条。它们各自代表一个用简单形状，特别是矩形来展示的值。下一段代码中，我把它们添加到已创建的分组元素中了。</p><pre class=" language-js"><code class="language-js">chart<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>goals<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'rect'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">xScale</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>language<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">yScale</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> height <span class="token operator">-</span> <span class="token function">yScale</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span> xScale<span class="token punctuation">.</span><span class="token function">bandwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>首先，我 <code>selectAll</code> 图表上的所有元素，返回结果为空。然后，<code>data</code> 函数根据数组长度通知 DOM 应该更新多少元素。如果数据个数多于 DOM 个数时，则 <code>enter</code> 会标识出缺少的元素。<code>enter</code> 会返回需要添加的元素。<br>通常，后面紧跟 <code>append</code> 方法会把元素添加到 DOM 中。</p><p>基本上，我用 D3.js 给数组每一项都追加了一个矩形。</p><p>当前只在彼此顶部添加了没有宽高的矩形。这两个属性必须通过之前的缩放函数计算所得。</p><p>我调用 <code>attr</code> 方法添加了矩形坐标。第二个参数可以是回调，它返回3个参数：当前绑定的数据，索引和所有数据数组。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>’x’<span class="token punctuation">,</span> <span class="token punctuation">(</span>actual<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>    <span class="token function">xScale</span><span class="token punctuation">(</span>actual<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>缩放函数返回给定范围值的坐标。计算坐标就是小菜一碟，诀窍是利用柱子的高度。必须从图表的高度减去计算出的 y 坐标，才能得到正确的列值。</p><p>定义矩形的宽度也会用到缩放函数。<code>scaleBand</code> 有一个 <code>bandwidth</code> 函数，它基于设置的间距返回一个元素的计算宽度。</p><p><img src="https://www.hualigs.cn/image/603cddf35c78e.jpg" alt=""></p><p>干得不错，但没那么花哨，对吧？</p><p>为了防止观众视觉疲劳，让我们添加一些信息改善下视觉效果！</p><h2 id="制作柱状图的技巧"><a href="#制作柱状图的技巧" class="headerlink" title="制作柱状图的技巧"></a>制作柱状图的技巧</h2><p>有一些基本规则值得一提。</p><ul><li>避免使用 3D 效果；</li><li>直观地排序数据点 - 按字母顺序或按数字排序；</li><li>柱条之间保持一定距离；</li><li>y 轴从 0 开始，而不是从最小值开始；</li><li>使用统一的颜色；</li><li>添加轴标签、标题、导引线。</li></ul><h2 id="D3-js-网格系统"><a href="#D3-js-网格系统" class="headerlink" title="D3.js 网格系统"></a>D3.js 网格系统</h2><p>我想在背景中添加栅格线突出那些值。</p><p>垂直和水平的线都可以添加，我的建议是只添加一种。过多的线会分散注意力。以下代码片段演示了如何添加水平和垂直的栅格。</p><pre class=" language-js"><code class="language-js">chart<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'grid'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`translate(0, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span><span class="token function">axisBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>xScale<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tickSize</span><span class="token punctuation">(</span><span class="token operator">-</span>height<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tickFormat</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>chart<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'g'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'grid'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>d3<span class="token punctuation">.</span><span class="token function">axisLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>yScale<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tickSize</span><span class="token punctuation">(</span><span class="token operator">-</span>width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">tickFormat</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://www.hualigs.cn/image/603cde3fe2a0a.jpg" alt=""></p><p>此例中，我更喜欢垂直栅格线，因为它可以引导视线，保持整体画面简介明快。</p><h2 id="D3-js-中的标签"><a href="#D3-js-中的标签" class="headerlink" title="D3.js 中的标签"></a>D3.js 中的标签</h2><p>我还想添加一些文字指导，从而使图表更加全面。让我们给图表命个名，并为坐标轴添加标签吧。</p><p><img src="https://www.hualigs.cn/image/603cde88c2a65.jpg" alt=""></p><p>文本是 SVG 元素，同样可以添加到 SVG 或者分组中。它们可以使用 x 和 y 坐标定位，文本对齐是通过 <code>text-anchor</code> 属性实现的。<br>添加标签文字，只需调用文本元素上的 <code>text</code> 方法。</p><pre class=" language-js"><code class="language-js">svg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> margin<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> margin <span class="token operator">/</span> <span class="token number">2.4</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">,</span> <span class="token string">'rotate(-90)'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'text-anchor'</span><span class="token punctuation">,</span> <span class="token string">'middle'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'Love meter (%)'</span><span class="token punctuation">)</span>svg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> width <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> margin<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'text-anchor'</span><span class="token punctuation">,</span> <span class="token string">'middle'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'Most loved programming languages in 2018'</span><span class="token punctuation">)</span></code></pre><h2 id="与-D3-js-交互"><a href="#与-D3-js-交互" class="headerlink" title="与 D3.js 交互"></a>与 D3.js 交互</h2><p>我们的图表内容已然丰富，但是仍然可以添加些互动效果。</p><p>以下的代码演示了如何给 SVG 元素添加事件监听。</p><pre class=" language-js"><code class="language-js">svgElement    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>actual<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>‘opacity’<span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>'mouseleave’<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>actual<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>‘opacity’<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><em>注意，我用了函数表达式而不是箭头函数，因为我通过 this 关键字访问元素。</em></p><p>当鼠标滑过选中的 SVG 元素时，它的透明度变为原始值的一半，鼠标离开元素时透明度恢复原始值。</p><p>你也可以通过 <code>d3.mouse</code> 获取鼠标坐标。它返回一个具有 x 和 y 坐标的数组。在光标所在位置显示提示，就可以通过这个实现。</p><p><strong>创建令人瞠目结舌的图表并没那么简单。</strong></p><p>可能需要图形设计师，UX 研究员和其他牛人的智慧。以下例子展示了几个提升图表效果的可能性！</p><p>我们的图表显示了非常相似的值，所以为了突出条形值之间的差异，我添加了一个 <code>mouseenter</code> 事件。每当用户悬停在特定的列时，该栏的顶部就会画一条水平线。此外，我还计算了与其他柱条的差异，并显示在了相应的柱条上。</p><p><img src="https://www.hualigs.cn/image/603cdec12ad98.jpg" alt=""></p><p>很整齐吧？我还在此例中增加了透明度，加大了柱条的宽度。</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>‘mouseenter’<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">transition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">duration</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'opacity'</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">xScale</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>language<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">,</span> xScale<span class="token punctuation">.</span><span class="token function">bandwidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>    chart<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'line'</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x1'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'y1'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'x2'</span><span class="token punctuation">,</span> width<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'y2'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'stroke'</span><span class="token punctuation">,</span> <span class="token string">'red'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 部分实现</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><code>transition</code> 方法表明我想把 DOM 改变绘制成动画。它的时间间隔是用 <code>duration</code> 函数设置的，该函数以毫秒作为参数。上面的过渡会淡化带状颜色，并加宽条形的宽度。</p><p>要画一条 SVG 线，我需要起点和终点。这可以通过 <code>x1</code>，<code>y1</code> 和 <code>x2</code>，<code>y2</code> 坐标来设置。直到我用 <code>stroke</code> 属性设置线条的颜色，线条才可见。</p><p>这里只展示了 <code>mouseenter</code> 事件这部分，切记，必须在 <code>mouseout</code> 事件上恢复或删除更改。本文末尾提供了完整的源代码。</p><h2 id="让我们给图表添加一些样式吧！"><a href="#让我们给图表添加一些样式吧！" class="headerlink" title="让我们给图表添加一些样式吧！"></a>让我们给图表添加一些样式吧！</h2><p>回顾下我们目前为止完成了那些功能，以及如何通过样式装扮图表。<em>可以通过先前用过的 <code>attr</code> 方法给 SVG 元素添加 class 属性。</em></p><p>我们的图表功能丰富，而不是死板的静态图片，鼠标悬停时可以显示各个柱条的差值。标题交代表格的背景，标签帮助识别坐标轴的测量单位。我还在右下角添加了新的标签，注明数据来源。</p><p><strong>剩下的事情就差颜色和字体了！</strong></p><p>深色背景的图表使亮色柱条看起来很酷。我还使用了 <code>open Sans</code> 字体，并给不同的标签设置不同的大小和粗细。</p><script async src="//jsfiddle.net/matehu/w7h81xz2/38/embed/"></script><p>注意到那条虚线了吗？它是通过 <code>stroke-width</code> 和 <code>stroke-dasharray</code> 属性实现的。使用 <code>stroke-dasharray</code>，可以定义虚线的图案和间距，从而改变形状的轮廓。</p><pre class=" language-css"><code class="language-css"><span class="token selector">line<span class="token id">#limit</span> </span><span class="token punctuation">{</span>    <span class="token property">stroke</span><span class="token punctuation">:</span> <span class="token hexcode">#FED966</span><span class="token punctuation">;</span>    <span class="token property">stroke-width</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.grid</span> path </span><span class="token punctuation">{</span>    <span class="token property">stroke-width</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.grid</span> <span class="token class">.tick</span> line </span><span class="token punctuation">{</span>    <span class="token property">stroke</span><span class="token punctuation">:</span> <span class="token hexcode">#9FAAAE</span><span class="token punctuation">;</span>    <span class="token property">stroke-opacity</span><span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>网格线比较讨巧，我给分组中的路径元素使用了 <code>stroke-width: 0</code>，为了隐藏表格的框架，我还通过设置线条的透明度降低它们的可见性。</p><p>所有其它有关字体大小和颜色的 CSS 可以参照源码。</p><h2 id="收尾我们的-D3-js-柱状图教程"><a href="#收尾我们的-D3-js-柱状图教程" class="headerlink" title="收尾我们的 D3.js 柱状图教程"></a>收尾我们的 D3.js 柱状图教程</h2><p>D3.js 是一个令人惊叹的 DOM 操作库。它的内部埋藏了无数的宝藏等待你去探索（确切的说，不是埋藏，文档也很齐全）。此文仅仅使用了它的工具集的冰山一角，就创建了一个不同凡响的柱状图。</p><!-- **继续探索吧，定能创造出无比壮观的视觉效果！**这是本文示例[源代码](https://jsfiddle.net/matehu/w7h81xz2/) 的链接。你用 D3.js 做过一些炫酷的东西吗？和我们分享一下！你有任何问题，或者想要关于这个主题的另一个教程，欢迎留言！谢谢阅读，下次再见！ -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umi ts 升级</title>
      <link href="2021/01/22/umi-ts-%E5%8D%87%E7%BA%A7/"/>
      <url>2021/01/22/umi-ts-%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="umi配置ts的过程"><a href="#umi配置ts的过程" class="headerlink" title="umi配置ts的过程"></a>umi配置ts的过程</h3><h4 id="背景（为什么要配置TS）"><a href="#背景（为什么要配置TS）" class="headerlink" title="背景（为什么要配置TS）"></a>背景（为什么要配置TS）</h4><p>  1.本来项目是一个老的项目，之前有过升级但是由于大家技术水平的不统一，TS学习成本高，导致一直在搁浅中。<br>  2.由于现在ts的普及以及最近代码质量越来越难以把控，所以引入ts是控制质量的一种方式。</p><h5 id="ts有啥好呢？"><a href="#ts有啥好呢？" class="headerlink" title="ts有啥好呢？"></a>ts有啥好呢？</h5><p>  1.可读性：类型明确，不需要额外注释类型；看到类型就知道怎么用；<br>  2.可维护性：在编译间断就可以发现错误，避免认为错误出现；<br>  3.兼容性：兼容js语法；可以直接将<code>*.js</code>改为<code>*.ts</code>使用；完全支持ES6规范；<br>  4.第三方库：兼容第三方库，即使第三方库不是用tst写的，也可以编写单独的类型文件供ts读取；</p><h5 id="ts有啥不好呢？"><a href="#ts有啥不好呢？" class="headerlink" title="ts有啥不好呢？"></a>ts有啥不好呢？</h5><p>  1.从纯js转过来有一定的难度，好多写法类似java；<br>  2.类型定义比较繁琐和js相比；<br>  3.一些库兼容性不是很好；<br>  4.需要额外的构建工作量；</p><h4 id="umi怎么配置"><a href="#umi怎么配置" class="headerlink" title="umi怎么配置"></a>umi怎么配置</h4><ul><li><p>新的umi 3 create工具包会自动帮你配好。老的项目需要手动配置；我们这里主要介绍老项目的配置；</p></li><li><p>不管是老项目还是新项目，我们至少都要懂他的配置，这样便于我们后期如果项目变庞大复杂了，这是对项目进行优化；</p></li></ul><h5 id="umi3脚手架配置"><a href="#umi3脚手架配置" class="headerlink" title="umi3脚手架配置"></a>umi3脚手架配置</h5><p>  按umi标准文档配置就可以了；<br>  umi <code>create-app</code>文档：<a href="https://umijs.org/zh-CN/docs">https://umijs.org/zh-CN/docs</a></p><pre><code>    $ yarn create @umijs/umi-app      Copy:  .editorconfig      Write: .gitignore      Copy:  .prettierignore      Copy:  .prettierrc      Write: .umirc.ts      Copy:  mock/.gitkeep      Write: package.json      Copy:  README.md      Copy:  src/pages/index.less      Copy:  src/pages/index.tsx      Copy:  tsconfig.json      Copy:  typings.d.ts      .      .      .</code></pre><p>  目录结构</p><pre><code>    .    ├── package.json    ├── .umirc.ts    ├── .env    ├── dist    ├── mock    ├── public    └── src        ├── .umi        ├── layouts/index.tsx        ├── pages            ├── index.less            └── index.tsx        └── app.ts  balabala ... 这里省略一万字（具体看文档就可以了)</code></pre><h5 id="umi老的项目配置"><a href="#umi老的项目配置" class="headerlink" title="umi老的项目配置"></a>umi老的项目配置</h5><p>  (1).umirc.ts<br>  官方解释： 配置文件，包含 umi 内置功能和插件的配置。<br>  话不多说，和老的<code>.js</code>一样并且可以共用。即运行时配置。</p><p>  (2)tsconfig.json<br>  官方解释： TypeScript项目的根目录；<br>  我的解释：用来配置编译ts项目的根文件和编译配置；</p><pre><code>  {    &quot;compilerOptions&quot;: {      &quot;target&quot;: &quot;esnext&quot;,      &quot;module&quot;: &quot;esnext&quot;,      &quot;moduleResolution&quot;: &quot;node&quot;,      &quot;importHelpers&quot;: true,      &quot;jsx&quot;: &quot;react&quot;,      &quot;esModuleInterop&quot;: true,      &quot;sourceMap&quot;: true,      &quot;baseUrl&quot;: &quot;.&quot;,      &quot;strict&quot;: true,      &quot;allowUnreachableCode&quot;:false, // 不报告执行不到的代码错误。      &quot;allowJs&quot;: true, //允许编译javascript文件。      &quot;allowSyntheticDefaultImports&quot;: true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。      &quot;experimentalDecorators&quot;: true,      &quot;outDir&quot;: &quot;dist/&quot;,      &quot;paths&quot;: {        &quot;@/*&quot;: [&quot;src/*&quot;],        &quot;@*&quot;: [&quot;src/*&quot;],        &quot;@SDVariableJS&quot;: [&quot;config/variableConfig.js&quot;],      }    },    &quot;files&quot;: [      &quot;core.ts&quot;,      &quot;sys.ts&quot;,      &quot;types.ts&quot;,    ],    &quot;include&quot;:[],    &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]  }</code></pre><p>  常用的参数配置：</p><p>  <code>allowUnreachableCode</code>:默认值-<code>false</code> 解释：不报告执行不到的代码错误。<br>  <code>allowJs</code>:默认值-<code>true</code> 解释：允许编译javascript文件。<br>  <code>allowSyntheticDefaultImports</code>:默认值-<code>true</code> 解释：允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。<br>  <code>noImplicitUseStrict</code>:默认值-<code>alse</code> 解释：模块输出中不包含 “use strict”指令。<br>  <code>alwaysStrict</code>:默认值-<code>false</code> 解释：以严格模式解析并为每个源文件生成 “use strict”语句<br>  <code>checkJs</code>:默认值-<code>false</code> 解释：在<code>.js</code>文件中报告错误。与 <code>allowJs</code>配合使用。</p><p>  更多参数配置见：<a href="https://www.tslang.cn/docs/handbook/compiler-options.html">https://www.tslang.cn/docs/handbook/compiler-options.html</a></p><p>  (3)typings.d.ts</p><p>  释义：存放一些声明，类似于C/C++的.h头文件。(不知道大家理解么，写过C的应该懂这个)</p><ul><li><p>TypeScript相比JavaScript增加了类型声明。这些类型声明帮助编译器识别类型，从而防止开发者“搬起石头砸自己的脚”。原则上TypeScript 需要开发者做到先声明后使用。这就导致开发者在调用很多原生接口（浏览器、Node.js）或者第三方模块的时候，因为某些全局变量或者对象的方法并没有声明过，导致编译器的类型检查失败。</p></li><li><p>用ts写的模块在发布的时候仍然是用js发布;<br>这就导致一个问题：ts 那么多类型数据都没了，所以需要一个<code>*.d.ts</code>文件来标记某个js库里面对象的类型然后typings就是一个网络上的d.ts数据库;</p></li><li><p><code>*.d.ts</code>类型定义文件，我感觉现在对我的用处就是编辑器的智能提示</p><p>(4)tslint.json</p><p>释义：保存了要使用的代码检查器的设置。<br>TSLint 对TypeScript 支持得很好，并且如果你使用的是 VsCode IDE，还有出色的插件支持。</p><p>tslint.json</p><pre><code>{&quot;defaultSeverity&quot;: &quot;error&quot;,&quot;extends&quot;: [  &quot;tslint:latest&quot;,  &quot;tslint-react&quot;,  &quot;tslint-config-prettier&quot; // 安装tslint-config-prettier后，tslint-config-prettier禁用TSLint的所有格式设置规则, TSLint 和 prettier在代码格式化规则上就不会有冲突了],&quot;jsRules&quot;: {},&quot;rules&quot;: {  &quot;object-literal-sort-keys&quot;: false,  &quot;no-console&quot;: true,  &quot;jsx-no-lambda&quot;: false,  &quot;no-submodule-imports&quot;: false,  &quot;no-implicit-dependencies&quot;: false}}</code></pre><p>tslint保存时校验配置</p><pre><code>&quot;editor.codeActionsOnSave&quot;: {  &quot;source.fixAll.eslint&quot;: true, // For ESLint  &quot;source.fixAll.tslint&quot;: true, // For TSLint  &quot;source.fixAll.stylelint&quot;: true， // For Stylelint}</code></pre><p>prettier保存时校验配置</p><pre><code>&quot;editor.formatOnSave&quot;: true,</code></pre></li><li><p>ps: 使用<code>tslint-config-prettier</code>关闭tslint中有关格式的规则，避免tslint与prettier在格式规则上产生冲突。目前我们的项目中（.jsx）中没有开启这一项。</p></li></ul><p>  当按ctrl+s保存代码时，tslint插件会自动按照默认配置文件（项目根目录下的<code>tslint.json</code>）检查代码错误，prettier插件会自动按照默认配置文件（项目根目录下的<code>.prettierrc</code>）检查代码风格，并自动矫正。(不建议使用)</p><h4 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h4><p>  建议安装tsLint 插件插件，vsCode中直接搜索安装；</p><ul><li><p>ps：这个库可<code>esLint</code>库可以共存，但是需要进行配置，保证在<code>.jsx</code>/<code>.tsx</code>文件中只有一个生效，不然错误提示会有误报的情况。<br>具体配置地址：<a href="https://github.com/Microsoft/typescript-tslint-plugin；">https://github.com/Microsoft/typescript-tslint-plugin；</a></p><p><img src="https://img.imgdb.cn/item/600ee2ed3ffa7d37b3236844.png" alt=""></p><p>到此时，我们的环境就配好了，接下来写一个小的React的demo.tsx吧；</p></li></ul><h4 id="React-typescript写法"><a href="#React-typescript写法" class="headerlink" title="React typescript写法"></a>React typescript写法</h4><p>  几个概念React.FC：<br>  -FC = Functional Component<br>  -SFC = Stateless Functional Component (已弃用)</p><p>  学习typescript的基本语法,具体ts见：<a href="https://www.runoob.com/typescript/ts-variables.html">https://www.runoob.com/typescript/ts-variables.html</a></p><ul><li><p>ps: 我有视频，如有需要可找我要哈😄；</p><p>有了以上typescrt姿势，我们就可以开始写ts代码了。⛽️</p><p>下面是我写的两种常见写法的demo；</p></li></ul><h5 id="泛型组件写法-对标Class写法"><a href="#泛型组件写法-对标Class写法" class="headerlink" title="泛型组件写法(对标Class写法)"></a>泛型组件写法(对标Class写法)</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> UseInfo <span class="token keyword">from</span> <span class="token string">"./UseInfo"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用其他组件（可以是.tsx，也可以是.jsx）</span><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">'./test.less'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用样式文件</span><span class="token keyword">function</span> <span class="token function">getExclamationMarks</span><span class="token punctuation">(</span>numChars<span class="token punctuation">:</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">Array</span><span class="token punctuation">(</span>numChars <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">;</span>  enthusiasmLevel<span class="token punctuation">:</span> number<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>  now<span class="token punctuation">:</span> string<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> State<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">:</span>Props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      now<span class="token punctuation">:</span> <span class="token string">"fff"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> clickTest <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span>string<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>now<span class="token punctuation">:</span> <span class="token string">'###'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> enthusiasmLevel <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> now <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'@@@@@'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> hello <span class="token punctuation">:</span> string <span class="token operator">=</span> <span class="token number">111</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>enthusiasmLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'You could be a little more enthusiastic. :D'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>UseInfo <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"greeting"</span><span class="token operator">></span>          <span class="token punctuation">{</span><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name <span class="token operator">+</span> <span class="token function">getExclamationMarks</span><span class="token punctuation">(</span>enthusiasmLevel<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>button<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clickTest</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Test<span class="token punctuation">;</span></code></pre><h5 id="Hooks写法"><a href="#Hooks写法" class="headerlink" title="Hooks写法"></a>Hooks写法</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> UseInfo <span class="token keyword">from</span> <span class="token string">"./UseInfo"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用其他组件（可以是.tsx，也可以是.jsx）</span><span class="token keyword">import</span> style <span class="token keyword">from</span> <span class="token string">'./base.less'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引用样式文件</span><span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>    changeTitle<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Auth <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> IProps<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>houseTitle<span class="token punctuation">,</span> setHoueseTitle<span class="token punctuation">]</span> <span class="token operator">=</span> useState<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>Fragment<span class="token operator">></span>      <span class="token operator">&lt;</span>useInfo <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input            type<span class="token operator">=</span><span class="token string">"text"</span>            className<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>demo1<span class="token punctuation">}</span>            placeholder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'please input'</span><span class="token punctuation">}</span>            value<span class="token operator">=</span><span class="token punctuation">{</span>houseTitle<span class="token punctuation">}</span>            onChange<span class="token operator">=</span><span class="token punctuation">{</span>changeTitle<span class="token punctuation">}</span>        <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">changeTitle</span><span class="token punctuation">(</span>e<span class="token punctuation">:</span>any<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 房屋标题</span>        <span class="token function">setHoueseTitle</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Auth</code></pre><p>好了，我们的一个完整的<code>umi</code>支持<code>ts</code>写法到这里就结束了，希望大家都学会了。</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>随着前端技术的发展。弱类型基本不能满足我们日益复杂的业务，强类型语言是未来的趋势。<br>Framework - Angular2、UI - ant-design、library - RxJS等项目已经都迁移到typescript了，我们还不跟进吗。。。</p>]]></content>
      
      
      <categories>
          
          <category> 全站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umi </tag>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios safari 返回时不执行代码问题解析</title>
      <link href="2020/12/22/ios-goBack-catch/"/>
      <url>2020/12/22/ios-goBack-catch/</url>
      
        <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>  最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。</p><ul><li><p>问题描述</p><p>最近在开发钉钉/企业微信内嵌第三方页面时，使用返回时，会导致页面白屏问题，问题比较棘手，花了3-4day用来定位问题，期间走了一些弯路。<br><img src="https://pic.downk.cc/item/5fea06dd3ffa7d37b382ee7e.png" alt=""></p><p>如上图，页面上有两个含有滚动条的DIV，一个是顶部的下拉modal，一个是body中的列表，但点击到详情的时候（第三张图），然后再点击返回，这个时候，顶部的下拉modal中就会有部分内容不限时，如图二，其实是有内容的，这个时候，只要将body中的内容滚动一下，modal的内容就都出来了。</p></li><li><p>以下是分析过程：</p></li></ul><h5 id="数据问题"><a href="#数据问题" class="headerlink" title="数据问题"></a>数据问题</h5><p>  看到问题后第一个怀疑的就是数据和代码结构问题,导致数据被覆盖或者没恶意截取的前11个，以为切换不同的账号，发现每次都显示前11个，后面的不显示，代码如下</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 渲染全部标签</span>  renderALlTags <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> currentTag<span class="token punctuation">,</span> activeIndex<span class="token punctuation">,</span> selectTabIndex <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> backlogTagList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">const</span> showTagList <span class="token operator">=</span> backlogTagList<span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">[</span>activeIndex <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">'pendingList'</span> <span class="token punctuation">:</span> <span class="token string">'doneList'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>tagList<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span>showTagList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>div              className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>style<span class="token punctuation">.</span>tagItem<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>                <span class="token function">Number</span><span class="token punctuation">(</span>currentTag<span class="token punctuation">)</span> <span class="token operator">===</span> item<span class="token punctuation">.</span>tag <span class="token operator">&amp;&amp;</span> selectTabIndex <span class="token operator">===</span> activeIndex                  <span class="token operator">?</span> style<span class="token punctuation">.</span>active                  <span class="token punctuation">:</span> <span class="token string">''</span>              <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>              key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>tag<span class="token punctuation">}</span>              onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleTagChange</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">></span>              <span class="token punctuation">{</span>item<span class="token punctuation">.</span>tagName<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token function">filterNum</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>total<span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>check代码发现和上面的没有关系。<br>然后使用强制滚动，发现代码压根就没有执行，连console都没有打印。。。。</p><h5 id="运行环境问题"><a href="#运行环境问题" class="headerlink" title="运行环境问题"></a>运行环境问题</h5><ul><li>因为再本地开发环境没有出现过这个问题，只有再部署到服务器上才出现这个问题，所以出现这个问题应该和环境有关。</li><li>接下来发现再有再ios系统上才有这个问题，安卓并没有，果然是运行环境的问题😄，高兴的太早了。</li><li>知道环境问题后，就开始一通百度。。。。<br>解决方案如下：</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> isPageHide <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>isPageHide<span class="token punctuation">)</span> <span class="token punctuation">{</span>              window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pagehide'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          isPageHide <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//或者</span>  <span class="token keyword">function</span> <span class="token function">pushHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"popstate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"回退！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// window.history.back();</span>    <span class="token comment" spellcheck="true">//在历史记录中后退,这就像用户点击浏览器的后退按钮一样。</span>    <span class="token comment" spellcheck="true">// window.history.go(-1);</span>    <span class="token comment" spellcheck="true">//你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。</span>    <span class="token comment" spellcheck="true">// self.location=document.referrer;</span>    <span class="token comment" spellcheck="true">//可以获取前一页面的URL地址的方法,并返回上一页。</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">"#"</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>   window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>巴拉巴拉找了一堆，popstate，pageshow，forceUpdate等。。。一个一个的试，发现都不行，此处省略十万个字。<br>绝望了。。。。</p><h5 id="注释代码和不使用第三方库"><a href="#注释代码和不使用第三方库" class="headerlink" title="注释代码和不使用第三方库"></a>注释代码和不使用第三方库</h5><p>  1.没有办法的情况下开始注释代码，不断的注释，不断的尝试，居然没有一次可以，发现问题隐藏比较深。<br>  2.注释代码不行就开始吧使用的antd库全部用原生div进行重写，写完之后发现问题依然存在，可以肯定这个不是和分装有关，开始怀疑是某些样式或者js在这个环境下不支持。<br>  3.这个时候开始想怎么能debugger一下，开始找各种工具尝试。<br>  emm，一天过去了，问题依然没有头绪</p><h5 id="Safari调试模式"><a href="#Safari调试模式" class="headerlink" title="Safari调试模式"></a>Safari调试模式</h5><p>  1.突然想起来，safari在mac上提供了开发者模式，可以联机调试，说干就干，扒token，授权，然后启动。<br>  2.系统倒是正常运行起来了，但是问题没有复现，反复确定后发现只有在钉钉/企业微信里才会出现这个问题，既然有Safari的调试思路，找钉钉的开发这模式。<br>  3.钉钉文档：<a href="https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64">https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64</a> 调试工具不支持ios版本。。。无解</p><p>  <img src="https://pic.downk.cc/item/5fea0bb23ffa7d37b38512c9.png" alt=""></p><p>  这时候已经陷入绝望了。无法调试，问题就无法定位，只能靠盲猜。</p><h5 id="react-infinite-scroller研读"><a href="#react-infinite-scroller研读" class="headerlink" title="react-infinite-scroller研读"></a>react-infinite-scroller研读</h5><p>  没有其他便捷的方法后，开始分析代码，考虑有可能出现问题的位置进行定位。react-infinite-scroller这个库的文档仔细看了一下<br>  <a href="https://www.npmjs.com/package/react-infinite-scroller">https://www.npmjs.com/package/react-infinite-scroller</a><br>  有几个API比较可疑但是试了也没有问题；<br>  <img src="https://pic.downk.cc/item/5fea0cdd3ffa7d37b3859cf0.png" alt=""></p><p>  在这里发现了滚动区域的问题，但是试了一下，改变滚动区绑定的位置问题依然存在：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>InfiniteScroll    initialLoad<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>    pageStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>    loadMore<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInfiniteOnLoad<span class="token punctuation">}</span>    hasMore<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>    getScrollParent<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollParentRef<span class="token punctuation">}</span>    threshold<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">350</span><span class="token punctuation">}</span>  <span class="token operator">></span>  <span class="token comment" spellcheck="true">//滚动内容</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>InfiniteScroll<span class="token operator">></span></code></pre><p>  看了这个文档后开始往滚动区域上想，然后各种尝试，各种绑定，居然都不能滚动加载更多了😭。<br>  然后就开始研究滚动问题。最开始怀疑过，但是自认为不可能，没有往这个方面深入。</p><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>  ios页面加载不全不能滚动</p><ul><li><p>问题描述 ：ios从首页进入，跳转其他页面再后退到首页，首页只显示一屏内容且无法滚动。</p></li><li><p>问题原因：在于ios浏览器内核的别致渲染逻辑：它会预先找到相应的overflow: scroll元素，如果子元素高度高于父元素，则建立原生的scrollView实现滚动。问题就出现在这个“预先”上，它预先获取的高度并不是子元素渲染后的真实高度。</p></li><li><p>解决办法：给设置了滚动的#root元素下的子元素wrapper设置min-height: 100vh; 先让wrapper内容设置为滚动区域，进行撑开，然后将滚动加载更多事件绑定在wrapper上进行监听。</p><p>代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#root</span></span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token important">!important</span><span class="token punctuation">;</span>  // <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> scroll!important<span class="token punctuation">;</span>  <span class="token property">-webkit-overflow-scrolling</span><span class="token punctuation">:</span> touch!important<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>divclassName<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>wrapper<span class="token punctuation">}</span>ref<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollParentRef <span class="token operator">=</span> ref<span class="token punctuation">)</span><span class="token punctuation">}</span>id<span class="token operator">=</span><span class="token string">"scrollableDiv"</span><span class="token operator">></span><span class="token operator">&lt;</span>InfiniteScroll  initialLoad<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span>  pageStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>  loadMore<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInfiniteOnLoad<span class="token punctuation">}</span>  hasMore<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>  getScrollParent<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>scrollParentRef<span class="token punctuation">}</span>  threshold<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">350</span><span class="token punctuation">}</span>  scrollableTarget<span class="token operator">=</span><span class="token string">"scrollableDiv"</span><span class="token operator">></span><span class="token comment" spellcheck="true">// 内容代码</span><span class="token operator">&lt;</span><span class="token operator">/</span>InfiniteScroll<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul><p>然后本地调试发现没有新的问题，部署，check，问题解决。</p><h5 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h5><p>  1.由于环境问题，无法进行直观的调试，这是一个很大的问题，后续研究一下有没有更好的工具。<br>  2.盲目的以经验来判断是自己的方向错误导致耽误了一些时间。<br>  3.问题的原因同事也有怀疑过，并且提出过，由于自己试的不够彻底盲目的认为不是这个原因导致走了弯路。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> web </tag>
            
            <tag> Safari </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不知道浏览器debug方法</title>
      <link href="2020/11/13/Browser-debug/"/>
      <url>2020/11/13/Browser-debug/</url>
      
        <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>写本篇博客的由来是上次舜阳的性能调试引申出来的，本人顺带挖掘了一下除了常用的sorce debugger和console，我们的Chrome浏览器都还能帮我们在平时工作中提供那些好用的调试模式呢。如下图chrome调试模式有好多的内容，下面就一一列举一下。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/b798ddc332d26ebd.jpg" alt=""></p><h4 id="elements"><a href="#elements" class="headerlink" title="elements"></a>elements</h4><p>1.用来查看，修改页面上的元素；（包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息等）（我们常用的略过）<br>2.查看dom上绑定的事件。<br>3.拷贝都没节点。<br>4.查看样式所在的文件路径。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/99cef2dabe985735.jpg" alt=""></p><pre><code>———handler是处理函数, 右键可以看到这个函数定义的位置, 一般 js 库绑定事件会包一层, 所以这里很难找到对应handler———isAtribute 表明事件是否通过 html 属性(类似onClick)形式绑定的———useCapture 是 addEventListener 的第三个参数, 说明事件是以 冒泡 还是 捕获 顺序执行</code></pre><h4 id="console"><a href="#console" class="headerlink" title="console"></a>console</h4><p>1.用来吐出代码中console的日志有（log、gruop、error等方法，具体可自行查找）<br>2.除了1我们还可以在里面执行一些测试代码和方法。<br>3.也可以吐出一些引用，查找方法对应的执行前后循序和位置。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/980bc3e8e3887079.jpg" alt=""></p><h4 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h4><p>这个页面内我们可以找到当前浏览器页面中的js源文件，方便我们查看和调试。在正式发布的网站中我们看到的都是压缩过的代码，但是在调试的是后这里是本地的资源文件。</p><p>我们可以点击下面的{}大括号按钮将代码转成可读格式，下图是两个不同的代码，由于线上的umi打包后太大了我就先截取了一个本地的图。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/0ecb959850f40374.jpg" alt=""></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/ae6885aabe64e56d.jpg" alt=""></p><ul><li>Sinppets:</li></ul><p>可以执行代码片段：<br>当我们想知道代码中的某个方法怎么是用或者是需要测试一个新的函数是否在这里可以调用时，会打开控制台有针对性的写一些调试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码.</p><p>所以推荐使用Sources下面的左侧的Sinppets代码片段按钮这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息</p><p>新建了一个名叫：a.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法；</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/59f7c6ef5e2f6e82.jpg" alt=""></p><ul><li>Content scripts:<br>Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，我们的项目里目前引入里jquery的相关方法。</li></ul><p><img src="https://ftp.bmp.ovh/imgs/2020/11/0044dc512a86138a.jpg" alt=""></p><h4 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h4><p>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看等。<br>1.可勾选单独的xhr，js，css等。<br>2.可以在preview中查看json格式化的接口返回。</p><p>这里重点提一下，在邮件copy中有一系列的选下，这里可以把这个请求的所有信息都copy出来，便于我们给后获发送。（主要用curl）<br><img src="https://ftp.bmp.ovh/imgs/2020/11/07d6f18ff7553c44.jpg" alt=""></p><h4 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h4><p>时间表可以记录和运行分析应用程序所有的活动，为了使的记录页面的交互，打开时间轴面板，然后按开始录制录制按钮（），或者通过键入键盘快捷键Cmd的 +E（Mac）或按Ctrl +E（Windows / Linux版）。这个记录按钮会从灰色变成红色，而Timeline将开始从你的页面获取时间线（timeline）。在你的应用中完成一些操作，记录到一些数据之后，再一次点击按钮来停止记录。这个分析会有点慢。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/8a4a398265e0e37d.jpg" alt=""></p><p>第一个框里是概述，这里可以大致看到页面的性能和执行效率。</p><p>第二个框里是event，即是事件监控。这是CPU的堆栈跟踪的可视化，绿色表示媒体时间，红色表示负载事件，蓝色表示DOM事件。</p><p>第三个框里表示存储。</p><p>第四个框里是详细信息，这里会显示事件的详细信息。</p><p>上图可见脚本15.68s，渲染时间2.7s，绘制时间0.46s说明我们脚本占用的比较大的资源。通过这个可以分析如果系统反应慢主要症状点在那个过程，通过如下分析可以相应的给出一些策略。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/00049d68d16f1bda.jpg" alt=""></p><p>在call tree中可以看到整个过程各个环节函数和方法调用情况</p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/d9ab72aa46ff6e0a.jpg" alt=""></p><h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>会列出所有的资源占用空间。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b20d67d4-91bd-449f-99c2-23ee9fef8601.jpg" alt=""></p><h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><p>可以告诉你这个网站的安全性，查看有效的证书等。</p><h4 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h4><p>会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍<br><a href="https://imgbed.cn"><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/6a0eef45-e921-4543-8d13-09c8749a5aae.jpg" alt=""></a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> debug </tag>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器token验证</title>
      <link href="2020/10/17/webToken_oAuth/"/>
      <url>2020/10/17/webToken_oAuth/</url>
      
        <content type="html"><![CDATA[<h3 id="OAuth认证流程"><a href="#OAuth认证流程" class="headerlink" title="OAuth认证流程"></a>OAuth认证流程</h3><h4 id="第三方登陆"><a href="#第三方登陆" class="headerlink" title="第三方登陆"></a>第三方登陆</h4><p>举个板栗：如果要通过第三方网站（例如github）登录没有自己的帐户系统的平台，最传统的方法是直接在平台的着陆页上输入github帐户密码， 可以通过用户帐户和密码用户数据从github获得它，但是这样做有很多缺陷：</p><ul><li>该平台需要以明文格式保存用户的github帐户和密码，这是不安全的；</li><li>该平台拥有在github中获取用户的所有权限信息；</li><li>只有修改密码后，用户才能取消授权平台的权限，但是这将导致用户授权的所有其他第三方应用程序无效，不知这一个应用；</li><li>如果第三方应用被破解，就会有用户密码泄露的风险，和所有使用github登录的网站的数据泄漏；</li></ul><p>为了解决上述问题，有OAuth。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>OAuth在“客户端”和“服务器”之间建立了一个授权层。 “客户端”不可以直接请求登陆“服务器”，而只能通过登录授权层来进行登陆客户端，通过服务端获取用户信息。 “客户端”登录授权层所使用的密码与用户的登陆密码不同。 登录时，用户可以指定授权层的token的授权范围和有效期。</p><p>授权层允许“客户端”登陆之后，“服务端”根据token的权限范围和有效期，向“客户端”返回用户的信息（userInfo）。</p><p>例如现在有一个平台为平台A，平台A的登陆方式只有通过gitHub账号第三方登录机制登录。流程图大致如下：</p><p><img src="https://img-blog.csdnimg.cn/20201018165245119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center" alt="授权登陆.png"></p><p>1.用户点击Sign in with gitHub<br> 需要跳转到授权页面， 授权页面的URL中包含的主要参数是如下：</p><ul><li>client_id: 在gitHub中申请应用ID；</li><li>redirect_uri: 授权成功之后要跳转到的地址；</li></ul><p>2.该页面会自动跳转到由redirect_uri在初始参数中定义的URL，并将code参数自动添加到URL的末尾</p><ul><li>gitHub验证：<a href="https://github.com/login/oauth/authorize?client_id=myclient_id&amp;scope=user:email">https://github.com/login/oauth/authorize?client_id=myclient_id&amp;scope=user:email</a></li></ul><p>3.平台A通过上一步获取的code参数换取Token，平台A请求如下接口获取Token</p><p><code>https://github.com/login/oauth/access_token</code>，需要包含以下参数：</p><ul><li>client_id: 在gitHub申请的应用ID；</li><li>client_secret: 在gitHub申请时提供的APP Secret；</li><li>grant_type: 需要填写authorization_code；</li><li>code: 上一步获得的code；</li><li>redirect_uri: 回调地址，需要与注册应用里的回调地址以及第一步的redirect_uri参数一致；</li></ul><p>4.通过第三步的请求，接口返回Token和相关授权数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"access_token"</span><span class="token punctuation">:</span> <span class="token string">"ACCESS_TOKEN"</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Token的值</span>    <span class="token string">"expires_in"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 过期时间</span>    <span class="token string">"uid"</span><span class="token punctuation">:</span> <span class="token string">"1234567"</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 当前授权用户的UID</span><span class="token punctuation">}</span></code></pre><p>5.使用在第四步中获取到的access_token，就可以去获取用户的资源了。</p><p>调用 <code>https://api.github.com/user?access_token=access_token</code> 这个API，就可以获取到用户的基本信息。 </p><p>用户的基本信息内容如下：</p><pre><code>{    &quot;login&quot;: &quot;Diamondtest&quot;,    &quot;id&quot;: 28478049,    &quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/28478049?v=3&quot;,    &quot;gravatar_id&quot;: &quot;&quot;,    &quot;url&quot;: &quot;https://api.github.com/users/Diamondtest&quot;,    &quot;html_url&quot;: &quot;https://github.com/Diamondtest&quot;,    &quot;followers_url&quot;: &quot;https://api.github.com/users/Diamondtest/followers&quot;,    &quot;following_url&quot;: &quot;https://api.github.com/users/Diamondtest/following{/other_user}&quot;,    &quot;gists_url&quot;: &quot;https://api.github.com/users/Diamondtest/gists{/gist_id}&quot;,    &quot;starred_url&quot;: &quot;https://api.github.com/users/Diamondtest/starred{/owner}{/repo}&quot;,    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/Diamondtest/subscriptions&quot;,    &quot;organizations_url&quot;: &quot;https://api.github.com/users/Diamondtest/orgs&quot;,    &quot;repos_url&quot;: &quot;https://api.github.com/users/Diamondtest/repos&quot;,    &quot;events_url&quot;: &quot;https://api.github.com/users/Diamondtest/events{/privacy}&quot;,    &quot;received_events_url&quot;: &quot;https://api.github.com/users/Diamondtest/received_events&quot;,    &quot;type&quot;: &quot;User&quot;,    &quot;site_admin&quot;: false,    &quot;name&quot;: null,    &quot;company&quot;: null,    &quot;blog&quot;: &quot;&quot;,    &quot;location&quot;: null,    &quot;email&quot;: null,    &quot;hireable&quot;: null,    &quot;bio&quot;: null,    &quot;public_repos&quot;: 0,    &quot;public_gists&quot;: 0,    &quot;followers&quot;: 0,    &quot;following&quot;: 0,    &quot;created_at&quot;: &quot;2017-05-06T08:08:09Z&quot;,    &quot;updated_at&quot;: &quot;2017-05-06T08:16:22Z&quot;}</code></pre><p>获取到用户信息，平台A进行登陆成功处理，授权登陆流程到此结束😊；</p><p>通过以上的步骤，在平台A和gitHub之间建立了独立的权限层。 该权限由用户授予，并且可以由用户取消。 它不同于第三方应用程序之间的独立性，并且不会相互干扰。 解决了以明文存储帐户密码的问题。</p><h3 id="Access-Token"><a href="#Access-Token" class="headerlink" title="Access Token"></a>Access Token</h3><p>Access Token是用于访问被保护资源的一种凭证，它是一个加密的字符串。</p><p>一般Access Token的有效时间都比较短，需要频繁的使用登陆抄错。<br>如果要解决用户的频繁登陆问题，就需要用到Refresh Token了操作了。<br>那么我们是不是直接多次获取Access Token也是可以的呢？答案是不方便的，主要是因为获取Access Token的时候需要使用到一个code，而这个code是需要用户进行授权操作的，威力避免频繁点击授权操作，就有了Refresh Token，用户不用再次进行操作了。</p><h3 id="Refresh-Token"><a href="#Refresh-Token" class="headerlink" title="Refresh Token"></a>Refresh Token</h3><p>在OAuth机制中，Refresh Token并不是必须设置的，但是不设置Refresh Token，则会增加用户登录的次数，交互不是很友好哈。</p><p>Refresh token的作用是刷新Access token，保证使用的token保持最新的有效token。Refresh Token是保存在客户端的服务器上的，当前的Access Token失效或者过期时，Refresh Token就会去获取一个新的Token，Refresh Token也是一个对客户端加密的字符串。</p><p>一个有效的token返回结果如下：</p><pre><code>    HTTP/1.1 200 OK    Content-Type: application/json    Cache-Control: no-store    Pragma: no-cache    {    &quot;access_token&quot;:&quot;MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3&quot;,    &quot;token_type&quot;:&quot;bearer&quot;,    &quot;expires_in&quot;:3600,    &quot;refresh_token&quot;:&quot;IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk&quot;,    &quot;scope&quot;:&quot;create&quot;    }</code></pre><p>获取流程原理大致如下：</p><p><img src="https://img-blog.csdnimg.cn/20201018181410884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center" alt="Refresh.png"></p><p>1.客户端通过认证服务器请求认证；</p><p>2.认证服务器校验客户端认证是否有效，如果有效，返回一个Access Token和一个Refresh Token；</p><p>3.客户端通过Access Token去请求服务器的资源；</p><p>4.如果Access Token有效，服务器返回给客户端资源，如果Access Token失效，服务器返回给客户端Token失效的信息，然后客户端会通过Refresh Token再次请求获取新的Access Token；</p><ul><li>Refresh Token本身也是有过期时间的，一般会比Access Token的过期时间长很多，如果想要将Refresh Token设置为永久有效，则可以通过配置参数实现。比如可以设置prompt=consent。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react虚拟DOM解析</title>
      <link href="2020/09/17/react-dom/"/>
      <url>2020/09/17/react-dom/</url>
      
        <content type="html"><![CDATA[<h3 id="一、浏览器怎么解析出DOM"><a href="#一、浏览器怎么解析出DOM" class="headerlink" title="一、浏览器怎么解析出DOM"></a>一、浏览器怎么解析出DOM</h3><h4 id="浏览器请求阶段"><a href="#浏览器请求阶段" class="headerlink" title="浏览器请求阶段"></a>浏览器请求阶段</h4><p>浏览器向服务器发起http请求，经过TCP/IP三次握手确认链接后，服务器将需要的代码发回给浏览器，这里我们只说返回的是html文件，其他的不多赘述。</p><h4 id="解析dom树阶段"><a href="#解析dom树阶段" class="headerlink" title="解析dom树阶段"></a>解析dom树阶段</h4><p>浏览器首先将收到的html代码，通过html解析器解析构建为一颗DOM树。数据结构中有许多的树。</p><h4 id="根据css渲染DOM树阶段"><a href="#根据css渲染DOM树阶段" class="headerlink" title="根据css渲染DOM树阶段"></a>根据css渲染DOM树阶段</h4><p>浏览器按从上到下，从左到右的顺序，读取DOM树的文档节点，顺序存放到一条树状结构上。而每一个DIV就是节点，这棵树就是文档流。当我们我们读取到的节点是属于另一个节点下的子节点，那么我们放到树上的位置就是该节点盒子的内部。<br>如果子节点下还有子节点，在树状结构中继续套盒子内部。根据它在DOM树上的结构，可以嵌套的层级没有限制的哦。<br>文档流排完之后，根据div上的class或者id等取对应的css资源（也是从http请求中获取到的）source中找到对应的css样式属性，将对应的属性绑定到盒子上，就完成过了文档树。</p><h4 id="浏览器渲染阶段"><a href="#浏览器渲染阶段" class="headerlink" title="浏览器渲染阶段"></a>浏览器渲染阶段</h4><p>布局完成之后，我们在页面上其实是看不到任何内容的<br>浏览器只是计算出了每一个节点对象应该被放到页面的哪个位置上，但并没有可视化。<br>因此最后一步就是将所有内容绘制出来，完成整个页面的渲染。</p><h3 id="二、虚拟dom树原理"><a href="#二、虚拟dom树原理" class="headerlink" title="二、虚拟dom树原理"></a>二、虚拟dom树原理</h3><p>虚拟DOM自然就是跟DOM有很大关系的了。我们在使用原生JS开发或者使用Jquery开发，经常就会操作DOM，但是我们使用的时候发现，每次我们改变DOM的时候，页面再次渲染，会消耗很多性能，有些时候会占到70%左右的渲染性能。如果我们尽可能减少dom树的操作或者在上文中提到的减少dom流中的改变，这样就会有效的提高浏览器的渲染速度。这样就有了虚拟dom的理论。</p><p>实际在React中，会把DOM转换成JavaScript对象，然后再把JavaScript对象转化成DOM，这样我们对于DOM的操作，实际上是在操作这个JavaScript对象。</p><p>虚拟的DOM的核心思想是：对复杂的文档DOM结构，提供一种方便的工具，进行最小化地DOM操作。</p><h4 id="构建虚拟DOM"><a href="#构建虚拟DOM" class="headerlink" title="构建虚拟DOM"></a>构建虚拟DOM</h4><p>例子：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>        className<span class="token punctuation">:</span> <span class="token string">"testClass"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>分析一下上面的代码：<br><code>React.createElement()</code> 方法传入了3个参数: 第1个参数对应的是标签(tag)名称，第2个参数是属性(id,class,attr…)，第三个参数是内容(text)，然后返回某个值。<br><code>ReactDOM.render()</code>方法接收了两个参数，第一个参数是刚刚提到的某个值，第二个参数是获取到的root元素，对应的是index.html中的<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></p><p>在上面的代码中加入console.log(element)，打印出element的值，如下：<br><img src="https://img-blog.csdnimg.cn/20191130135734265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70" alt="示例.png"></p><p>上面的console吐出的是一段dom数据，此时React.createElement()方法创建了虚拟DOM。</p><h4 id="模拟实现React-createElement"><a href="#模拟实现React-createElement" class="headerlink" title="模拟实现React.createElement()"></a>模拟实现React.createElement()</h4><p>有上图可以这个对象有多个属性，目前来说对我们比较重要的是props和type属性，所以先实现对于这两个属性的操作。<br><code>React.createElement()</code> 接收3个参数，现在要把这3个参数合并到type和props中。<br><code>React.createElement()</code> 接收3个以上参数，说明该元素里面有多个子元素（这些子元素仍然是React.createElement()），那么把第二个参数后面的所有参数转换成数组放入children中</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> props <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> element<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> propName<span class="token punctuation">;</span>    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 定义props</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>propName <span class="token keyword">in</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>        props<span class="token punctuation">[</span>propName<span class="token punctuation">]</span> <span class="token operator">=</span> config<span class="token punctuation">[</span>propName<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 复制config的属性到props中</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理children</span>    <span class="token keyword">const</span> childrenLength <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>childrenLength <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        props<span class="token punctuation">.</span>children <span class="token operator">=</span> children<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有多个子元素的情况</span>        props<span class="token punctuation">.</span>children <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>test code :</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>    className<span class="token punctuation">:</span> <span class="token string">"testClass"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"span1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"span"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"span2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>console结果(实际是一个javascript的对象):</p><p><img src="https://img-blog.csdnimg.cn/2019113014240124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70" alt="示例.png"></p><h4 id="React-Diff算法"><a href="#React-Diff算法" class="headerlink" title="React Diff算法"></a>React Diff算法</h4><ol><li><p>两个相同的组件产生相似的DOM结构，而不同的组件产生不同的DOM结构。</p></li><li><p>对于同一级别的一组子节点，可以通过唯一的ID来区分它们。</p></li></ol><p>算法上的优化是 React 整个界面 Render 的基础，保证了整体界面渲染的性能。</p><p>为了在树之间进行比较，我们首先要能够比较两个节点，在 React 中即比较两个虚拟 DOM 节点，当两个节点不同时，应该如何处理。这分为两种情况：</p><ul><li>（1）节点类型不同 </li><li>（2）节点类型相同，但是属性不同。</li></ul><p>节点类型不同：直接删除原节点， 插入新节点。</p><p>React 的 DOM Diff 算法实际上只会对树进行逐层比较，两棵树只会对同一层次的节点进行比较如下所述。</p><p>当我们调用 setState 时，state 内部状态发生变动，再次调用 render 方法就会生成一个新的虚拟 DOM 树，这样我们就能使用 diff 方法计算出新老虚拟 DOM 发送变化的部分，最后使用 patch 方法，将变动渲染到视图中。</p><p>它是比较新旧VDOM的更改，然后将更改的部分更新到视图。 对应于代码，它是一个diff函数，返回一个补丁。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>1.虚拟DOM基本上不会引发页面布局和重绘操作。</p><p>2.在频繁修改虚拟DOM之后（以及在setState之后），一次比较并修改需要在真实DOM中修改的部分，最后在真实DOM中排版和重绘以减少布局和重绘的损失。</p><p>3.虚拟DOM有效地减少了大量（真实DOM节点）的重绘和排版，最终的差异与真实DOM进行了比较，并且只渲染一修改的那一小部分（与2相同）</p><p>使用虚拟DOM的损耗计算：</p><p><code>总损耗 = 虚拟DOM增删改 + （与Diff算法效率有关）真实DOM差异增删改 + （较少的节点）排版与重绘</code></p><p>直接使用真实DOM的损耗计算：</p><p><code>总损耗 = 真实DOM完全增删改 + （可能较多的节点）排版与重绘</code></p><p>简而言之，为了减少因频繁进行大面积重绘而导致的性能问题，不同的框架不一定需要虚拟DOM。 关键是要查看框架是否经常触发大面积DOM操作。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> dom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器储存的前世今生</title>
      <link href="2020/08/22/web-%E5%82%A8%E5%AD%98/"/>
      <url>2020/08/22/web-%E5%82%A8%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器储存"><a href="#浏览器储存" class="headerlink" title="浏览器储存"></a>浏览器储存</h3><p>1.在代码中我们为了提高性能会请求一次数据储存起来然后在相应的页面进行读取，而不是多次去请求这样是为了提高性能。<br>2.那么常用的浏览器端存储技术有哪些？在我们工作中会经常遇到需要前端来储存一些数据，除了react model等工具，浏览器也为我们提供来一些可用的储存，那么这些储存都有哪些特点，需要我们怎么注意呢，我们接下来就详细的看看具体的用法。<br>3.在未来客户端可能会和服务起一样有自己的数据库，提供各种数据的查询方式，提供各种API来提高查询性能。</p><h3 id="常用的储存方式"><a href="#常用的储存方式" class="headerlink" title="常用的储存方式"></a>常用的储存方式</h3><ul><li>cookie （也叫 Web Cookie 或浏览器 Cookie） </li><li>userData  比较早历史</li><li>globalStorage  历史</li><li>sessionStorage/localStorage  主流</li><li>IndexedDB  主流或未来主流</li></ul><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul><li>以下是cookie的官方解释、</li></ul><pre class=" language-javascript"><code class="language-javascript">HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的HTTP协议记录稳定的状态信息成为了可能。Cookie 主要用于以下三个方面：会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）个性化设置（如用户自定义设置、主题等）浏览器行为跟踪（如跟踪分析用户行为等）</code></pre><ul><li>用法：</li></ul><p>用来设置http请求的一些规定，但已目前前端来说，更多的是储存用户的登录信息，和后端接口保持通信。</p><ul><li>简单的demo</li></ul><pre class=" language-javascript"><code class="language-javascript">  Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> <span class="token operator">&lt;</span>cookie名<span class="token operator">>=</span><span class="token operator">&lt;</span>cookie值<span class="token operator">></span></code></pre><p>服务器通过该头部告知客户端保存 Cookie 信息。</p><pre class=" language-javascript"><code class="language-javascript">  HTTP<span class="token operator">/</span><span class="token number">1.0</span> <span class="token number">200</span> OK  Content<span class="token operator">-</span>type<span class="token punctuation">:</span> text<span class="token operator">/</span>html  Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> yummy_cookie<span class="token operator">=</span>choco  Set<span class="token operator">-</span>Cookie<span class="token punctuation">:</span> tasty_cookie<span class="token operator">=</span>strawberry</code></pre><p>但是cookie所能储存的数据是有限的，而且在关闭或者跨域的情况下都是无法访问到的，我们聪明的程序发明者就研究了这一种可以userData保存数据的方式。</p><h4 id="userData"><a href="#userData" class="headerlink" title="userData"></a>userData</h4><p>userData 是IE浏览器专有的数据储存。我们常用这种方式来兼容ie的老版浏览器，最低版本支持到IE5.0版本，最高到IE9以上。现在有H5基本兼容了更优的一些储存APi，这种用法基本快废弃了。<br>  当时他的出现是为了解决cookie的数据局限性。当浏览器关闭时，他的数据也是可以保留的。<br>  用户数据允许每个文档最多128KB数据，每个域名最多1MB数据。<br>  储存格式以xml的形式储存在客户端上。</p><ul><li>使用方式</li></ul><p>给div添加behavior属性（或者动态生成一个behavior的dom标签）</p><pre class=" language-css"><code class="language-css">  &lt;div style=<span class="token string">"behavior:url(#default#userData)"</span> id=<span class="token string">"dataInfoStore"</span>>&lt;/div></code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> dataStore <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"dataInfoStore"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使用setAttribute()方法保存数据 这是使用的是div的attr元素的道理</span>  dataStore<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"oldBool"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//使用save添加到自定义的变量名空间下</span>  dataStore<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"listInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>读取数据</p><pre class=" language-javascript"><code class="language-javascript">  dataStore<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"listInfo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//load储存数据</span>  dataStore<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"oldBool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取key值</span></code></pre><p>删除数据 </p><pre class=" language-javascript"><code class="language-javascript">  dataStore<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"listInfo"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除attr信息</span></code></pre><h4 id="globalStorage"><a href="#globalStorage" class="headerlink" title="globalStorage"></a>globalStorage</h4><p>globalStorage也是H5比较老的一种储存方式，他是继userData之后出现的一种储存方式，一个域名下罪错可以储存5120k的数据，也可以跨页面读取。</p><pre class=" language-javascript"><code class="language-javascript">  globalStorage<span class="token punctuation">[</span><span class="token string">'core.mokahr.com'</span><span class="token punctuation">]</span> 所有core<span class="token punctuation">.</span>mokahr<span class="token punctuation">.</span>com下面的页面都可以使用这块空间  globalStorage<span class="token punctuation">[</span><span class="token string">'mokahr.com'</span><span class="token punctuation">]</span> mokahr<span class="token punctuation">.</span>com下面的页面都可以使用这块空间  globalStorage<span class="token punctuation">[</span><span class="token string">'com'</span><span class="token punctuation">]</span>：所有com域名都可以 共享的使用这一块空间  globalStorage<span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span> ：所有页面都可以使用的空间</code></pre><p>使用方法：</p><ul><li>设置<pre class=" language-javascript"><code class="language-javascript">globalStorage<span class="token punctuation">[</span><span class="token string">"mokahr.com"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>employName <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span></code></pre></li><li>取值<pre class=" language-javascript"><code class="language-javascript">globalStorage<span class="token punctuation">[</span><span class="token string">"mokahr.com"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"employName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 张三</span></code></pre></li><li>删除<pre class=" language-javascript"><code class="language-javascript">globalStorage<span class="token punctuation">[</span><span class="token string">"mokahr.com"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">"employName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>😊是不是和我们的sessionStorage/localStorage很像啊，其实接下来就发展成sessionStorage/localStorage的形式了。</p><h4 id="sessionStorage-localStorage"><a href="#sessionStorage-localStorage" class="headerlink" title="sessionStorage/localStorage"></a>sessionStorage/localStorage</h4><p><code>sessionStorage</code>对象是存储特定于某个会话的数据，也就是数据只保存到浏览器关闭，这个对象就像会话cookie，也会在浏览器关后消失，存储在<code>sessionStorage</code>中的数据可以跨越页面刷新而存在。而<code>localStorage</code>的数据是永久性的，他不随着浏览器的关闭而清除。用这种方法我们可以储存一些需要保留的数据，希望下次打开后直接显示出来（比如用户的习惯行为）；<br>这两种是我们目前常用的储存数据的方式；</p><p>支持<code>sessionStorage/localStorage</code>的浏览器最小版本：IE8、Chrome 5。所以现在主流的浏览器都支持这个写法，我们基本现在都用这种写法来实现会话数据的储存。最多储存5M数据。</p><p>注意：<code>sessionStorage/localStorage</code> 的数据是可见的，一些敏感的数据不建议储存在这里。</p><ul><li><p>设值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  使用方法存储数据 json对象要使用JSON.Stringify()方法转换成文本格式</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"userData"</span><span class="token punctuation">,</span> <span class="token string">"这是一个测试数据可以是json string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  使用属性存储数据</span>sessionStorage<span class="token punctuation">.</span>userData <span class="token operator">=</span> <span class="token string">"这是一个测试数据可以是json string"</span><span class="token punctuation">;</span>sessionStorage<span class="token punctuation">[</span><span class="token string">'userData'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"这是一个测试数据可以是json string"</span><span class="token punctuation">;</span></code></pre></li><li><p>取值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//通过getItem（）方法取值</span><span class="token keyword">const</span> userData <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'userData'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里是key名</span><span class="token comment" spellcheck="true">//通过属性取值</span><span class="token keyword">const</span> userData <span class="token operator">=</span> sessionStorage<span class="token punctuation">[</span><span class="token string">'userData'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果储存的是一个json字符串需要通过JSON.parse()来序列化成对象</span><span class="token keyword">const</span> JsonUserdata <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>删除属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//通过removeItem()来删除</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'userData'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移除userData属性的数据</span></code></pre></li></ul><h4 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h4><p>官方解释：IndexedDB 是一种可以让你在用户的浏览器内持久化存储数据的方法。IndexedDB 为生成 Web Application 提供了丰富的查询能力，使我们的应用在在线和离线时都可以正常工作。</p><p>IndexedDB兼容支持浏览器情况：<br>  fireFox: 50+;<br>  chrome: 57+;<br>  safari: 10+;<br>  opera: 45+</p><p>查询支持情况：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"不支持"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>具体使用：</p><ul><li>引入</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 打开我们的数据库</span>  <span class="token keyword">var</span> MokaDataStore <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"mokaDataStore"</span><span class="token punctuation">,</span><span class="token string">'1200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//储存空间和版本号</span>  <span class="token comment" spellcheck="true">// 打开数据库成功后，自动调用onsuccess事件回调。</span>  MokaDataStore<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打开数据库失败</span>  MokaDataStore<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第一次打开成功后或者版本有变化自动执行以下事件：一般用于初始化数据库。</span>  MokaDataStore<span class="token punctuation">.</span>onupgradeneeded <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dv <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取到 demoDB对应的 MokaDataStore,也就是我们的数据库。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>db<span class="token punctuation">.</span>objectStoreNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>employeeStore<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//如果表格不存在，创建一个新的表格（keyPath，主键 ； autoIncrement,是否自增），会返回一个对象（objectStore）</span>      <span class="token comment" spellcheck="true">// objectStore就相当于数据库中的一张表。IDBObjectStore类型。</span>      <span class="token keyword">var</span> objectStore <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">createObjectStore</span><span class="token punctuation">(</span>employeeStore<span class="token punctuation">,</span> <span class="token punctuation">{</span>        keyPath<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>        autoIncrement<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//指定可以被索引的字段，unique字段是否唯一。类型： IDBIndex</span>      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">'employeeId'</span><span class="token punctuation">,</span> <span class="token string">'employeeId'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        unique<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      objectStore<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">'employeeName'</span><span class="token punctuation">,</span> <span class="token string">'employeeName'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        unique<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'数据库版本更改为： '</span> <span class="token operator">+</span> dbVersion<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>向数据库中增加数据</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>employeeStore<span class="token punctuation">,</span> <span class="token string">"readwrite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 在所有数据添加完毕后的处理</span>  transaction<span class="token punctuation">.</span>oncomplete <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"添加完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  transaction<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 错误处理！</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> objectStore <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>employeeStore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> addEmployeeRequest <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    employeeId<span class="token punctuation">:</span> <span class="token number">6758</span><span class="token punctuation">,</span>    employeeName<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>transaction() 方法接受两个参数（一个是可选的）并返回一个事务对象。第一个参数是事务希望跨越的对象存储空间的列表。如果你希望事务能够跨越所有的对象存储空间你可以传入一个空数组，但请不要这样做，因为标准规定传入一个空数组会导致一个InvalidAccessError（可以使用属性db.objectStoreNames）。如果你没有为第二个参数指定任何内容，你得到的是只读事务。如果你想写入数据，你需要传入 “readwrite” 标识。</p><ul><li>从数据库中获取数据</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> transaction <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span>employeeStore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> objectStore <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span>employeeStore<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> request <span class="token operator">=</span> objectStore<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">6758</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// IDBIndex</span>  request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 错误处理!</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对 request.result 做些操作！</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"employeeId === 6758的数据是"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span>result<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>从数据库中删除数据</li></ul><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> request <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"customers"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"readwrite"</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">objectStore</span><span class="token punctuation">(</span><span class="token string">"customers"</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">6758</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 删除employeeId是6758的数据成功！</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chrome </tag>
            
            <tag> web </tag>
            
            <tag> Storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react性能优化</title>
      <link href="2020/07/25/react-performance/"/>
      <url>2020/07/25/react-performance/</url>
      
        <content type="html"><![CDATA[<h4 id="React组件性能优化"><a href="#React组件性能优化" class="headerlink" title="React组件性能优化"></a>React组件性能优化</h4><p>React是一个专注于UI层的框架，它使用虚拟DOM技术，以保证它UI的高速渲染；使用单向数据流，因此它数据绑定更加简单；那么它内部是如何保持简单高效的UI渲染呢？这种渲染机制有可能存在什么性能问题呢？</p><h5 id="1-render函数"><a href="#1-render函数" class="headerlink" title="1.render函数"></a>1.render函数</h5><p>  (1)在调用组件时，如果某个属性值是函数，避免使用箭头函数，不然每次比较props中该属性时都是不同的。<br>  正确的做法</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//TODO</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ChildDom  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//构造函数每一次渲染的时候只会执行一遍；</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p>不推介例子：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>ChildDom  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。</span>  <span class="token operator">&lt;</span>ChildDom  onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token comment" spellcheck="true">//在每次render()的时候都会重新执行一遍函数；</span></code></pre><p>  (2)在shouldComponentUpdate生命周期中进行比较，减少render函数刷新次数。<br>  使用浅比较时，如果是对象类型需要特别注意（这里也可以使用ladash库来实现）<br>  demo:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>nextState<span class="token punctuation">.</span>rosterList<span class="token punctuation">)</span> <span class="token operator">===</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>staterosterList<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>使用React.memo进行组件记忆；<br>纯函数的话也可以使用React.memo来实现类似的功能。或者可以减少不必要的state参数使用。</p><h5 id="2-key值的使用"><a href="#2-key值的使用" class="headerlink" title="2.key值的使用"></a>2.key值的使用</h5><p>  (1)react组件在装载过程中，react通过在render方法在内存中产生一个树形结构，树上的节点代表一个react组件或者原生的Dom元素，这个树形结构就是我们所谓的Vitural Dom，react根据这个来渲染产生浏览器的Dom树。<br>  (2)react在更新阶段对比原有的Vitural Dom和新生成的Vitural Dom，找出不同之处，在根据不同来渲染Dom树。<br>  (3)react为了追求高性能，采用了时间复杂度为O(N)来比较两个属性结构的区别，因为要确切比较两个树形结构，需要通过O(N^3),这会降低性能.</p><h5 id="3-减少使用state来共享数据-跨组件使用数据是推介使用redux。"><a href="#3-减少使用state来共享数据-跨组件使用数据是推介使用redux。" class="headerlink" title="3.减少使用state来共享数据,跨组件使用数据是推介使用redux。"></a>3.减少使用state来共享数据,跨组件使用数据是推介使用redux。</h5><p>  如果有如下情况意味着你要使用redux<br>  1.组件首其他不相关组件的状态控制<br>  2.组件之间不是子父组件关系<br>  3.许多不相关的组件以相同的方式更新状态<br>  4.状态以许多不同的方式更新</p><h5 id="4-组件懒加载"><a href="#4-组件懒加载" class="headerlink" title="4.组件懒加载"></a>4.组件懒加载</h5><p>1、webpack+es6的import(this.props.children为回调函数);</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span>  <span class="token class-name">extends</span> Component <span class="token punctuation">{</span>    constructor <span class="token punctuation">(</span> props <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span> <span class="token punctuation">(</span> props <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用下面load</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span>            Com<span class="token punctuation">:</span><span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">load</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//this.props.load()就是调用indexrou.jsx传过来的函数</span>        props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Com<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的就是传过来的函数</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                Com<span class="token punctuation">:</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token operator">?</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Com<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Com<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Load <span class="token keyword">from</span> <span class="token string">'../components/lazy'</span><span class="token punctuation">;</span><span class="token keyword">let</span> Demo2<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Load load<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/demo2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token punctuation">(</span>Com<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&lt;</span>Com<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">}</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>Load<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>2、webpack+es6的import纯粹的高阶组价</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//传过来一个函数</span>    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span>        constructor <span class="token punctuation">(</span> props <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span> <span class="token punctuation">(</span> props <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span>                Com<span class="token punctuation">:</span><span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">load</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Com<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//调用函数获取它传过来的路径</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    Com<span class="token punctuation">:</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token operator">?</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">null</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> Com<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Com<span class="token punctuation">;</span>            <span class="token keyword">return</span> Com<span class="token operator">?</span><span class="token operator">&lt;</span>Com<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在router路由里 indexrou.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Load <span class="token keyword">from</span> <span class="token string">'../components/lazy'</span><span class="token punctuation">;</span><span class="token keyword">let</span> Demo2<span class="token operator">=</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/demo2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、webpack+es6的import +async（高阶函数）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span>        constructor <span class="token punctuation">(</span> props <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span> <span class="token punctuation">(</span> props <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span>                Com<span class="token punctuation">:</span><span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//即使是同步的话执行的也是promise.resolve这个方法，将同步代码包装一层，进行同步</span>        <span class="token comment" spellcheck="true">//await后面接收的是值或promise</span>        <span class="token keyword">async</span> <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> Com<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//依次执行，只有一个await往下走，Com是有值的</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                Com<span class="token punctuation">:</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token operator">?</span>Com<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">:</span><span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        render <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> Com<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Com<span class="token punctuation">;</span>            <span class="token keyword">return</span> Com<span class="token operator">?</span><span class="token operator">&lt;</span>Com<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在router路由里 indexrou.jsx</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Load <span class="token keyword">from</span> <span class="token string">'../components/lazy'</span><span class="token punctuation">;</span><span class="token keyword">let</span> Demo2<span class="token operator">=</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../components/demo2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>4、webpack+require.ensure (高阶组价)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span>loading<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span>        constructor <span class="token punctuation">(</span> props <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span> <span class="token punctuation">(</span> props <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token operator">=</span><span class="token punctuation">{</span>                Com<span class="token punctuation">:</span><span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//[]依赖项</span>                    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">loading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    Com<span class="token punctuation">:</span>data                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> Com<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>Com<span class="token punctuation">;</span>            <span class="token keyword">return</span> Com<span class="token operator">?</span><span class="token operator">&lt;</span>Com<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>在router路由里 indexrou.jsx</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">import</span> Load <span class="token keyword">from</span> <span class="token string">'../components/lazy'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> Demo2<span class="token operator">=</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../components/demo2'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5-使用-React-Fragments-避免额外标记"><a href="#5-使用-React-Fragments-避免额外标记" class="headerlink" title="5.使用 React Fragments 避免额外标记"></a>5.使用 React Fragments 避免额外标记</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token function">radiosBtns</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>            <span class="token operator">&lt;</span>RadioButton value<span class="token operator">=</span><span class="token string">"1"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Icon type<span class="token operator">=</span><span class="token string">"flag"</span> className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' fs16'</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>RadioButton<span class="token operator">></span>            <span class="token operator">&lt;</span>RadioButton value<span class="token operator">=</span><span class="token string">"2"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Icon type<span class="token operator">=</span><span class="token string">"flag"</span> className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' fs16'</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>RadioButton<span class="token operator">></span>            <span class="token operator">&lt;</span>RadioButton value<span class="token operator">=</span><span class="token string">"3"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Icon type<span class="token operator">=</span><span class="token string">"flag"</span> className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' fs16'</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>RadioButton<span class="token operator">></span>            <span class="token operator">&lt;</span>RadioButton value<span class="token operator">=</span><span class="token string">"4"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Icon type<span class="token operator">=</span><span class="token string">"flag"</span> className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' fs16'</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>RadioButton<span class="token operator">></span>            <span class="token operator">&lt;</span>RadioButton value<span class="token operator">=</span><span class="token string">"5"</span> key<span class="token operator">=</span><span class="token string">"5"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span><span class="token string">'10px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>Icon type<span class="token operator">=</span><span class="token string">"flag"</span> className<span class="token operator">=</span><span class="token punctuation">{</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' fs16'</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>RadioButton<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>React<span class="token punctuation">.</span>Fragment<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="6-不要使用内联函数定义"><a href="#6-不要使用内联函数定义" class="headerlink" title="6.不要使用内联函数定义"></a>6.不要使用内联函数定义</h5><p>eg: 一个内联的“DOM组件”事件处理程序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> clicked<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">></span>          XXX        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="7-优化-React-中的条件渲染"><a href="#7-优化-React-中的条件渲染" class="headerlink" title="7.优化 React 中的条件渲染"></a>7.优化 React 中的条件渲染</h5><p>  可以使用三元，if-else，and运算符(&amp;&amp;)。推荐使用&amp;&amp;来表示；<br>  尽量使用return null来判断显隐，而不是用css的display：none，避免回流；</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> con <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>goods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text <span class="token operator">?</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>goods<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">:</span><span class="token keyword">null</span>   <span class="token comment" spellcheck="true">//条件渲染 </span>    <span class="token keyword">return</span><span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token punctuation">{</span>con<span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><h5 id="8-事件节流和防抖"><a href="#8-事件节流和防抖" class="headerlink" title="8.事件节流和防抖"></a>8.事件节流和防抖</h5><p>（参考节流防抖功能实现，这里不多赘述）</p><h5 id="9-不要在render中生成新的引用"><a href="#9-不要在render中生成新的引用" class="headerlink" title="9.不要在render中生成新的引用"></a>9.不要在render中生成新的引用</h5><p>定义函数、使用内联样式或者动态生成一些不依赖state或props的jsx这些，凡是不依赖state或props的都应该提到render之外，否则会造成每次render的时候生成新的引用，会导致在diff算法对比属性或节点的过程中发现两个引用不一致，对于react来说，这说明属性值发生了改变，最后会被替换成新的引用，造成性能浪费。例如函数应该放在render函数外定义，样式应该单独建一个文件，然后引入，使用生命周期函数或者自定义函数动态生成一些不依赖state或props的jsx。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Fragment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'antd/dist/antd.css'</span><span class="token keyword">import</span> <span class="token punctuation">{</span>Input<span class="token punctuation">,</span>Button<span class="token punctuation">,</span>List<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span> <span class="token keyword">const</span> TodoListUI<span class="token operator">=</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Fragment<span class="token operator">></span>            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"form-box"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Input placeholder<span class="token operator">=</span><span class="token string">"请输入"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span> onChange<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span>style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token string">'300px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Button type<span class="token operator">=</span><span class="token string">"primary"</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>marginLeft<span class="token punctuation">:</span><span class="token string">'20px'</span><span class="token punctuation">}</span><span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>Button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div  className<span class="token operator">=</span><span class="token string">"list"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>List                size<span class="token operator">=</span><span class="token string">"small"</span>                bordered                dataSource<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>list<span class="token punctuation">}</span>                renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>List<span class="token punctuation">.</span>Item onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span><span class="token function">handleDelete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>List<span class="token punctuation">.</span>Item<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>Fragment<span class="token operator">></span>     <span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> TodoListUI<span class="token punctuation">;</span></code></pre><h5 id="10-ProtoTypes-的验证会损耗性能"><a href="#10-ProtoTypes-的验证会损耗性能" class="headerlink" title="10.ProtoTypes 的验证会损耗性能"></a>10.ProtoTypes 的验证会损耗性能</h5><p>  建议用环境变量控制在生产环境关闭类型验证</p><pre class=" language-javascript"><code class="language-javascript">  IncomingTasks<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>    reTryGetData<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>  <span class="token punctuation">}</span></code></pre><h5 id="11-尽量少直接操作dom"><a href="#11-尽量少直接操作dom" class="headerlink" title="11.尽量少直接操作dom"></a>11.尽量少直接操作dom</h5><p>  用setTimeout或不可控的refs等dom操作；<br>  setTimeout会导致state多次更新，refs会直接操作dom，消耗大量性能；</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>textDom<span class="token punctuation">)</span><span class="token punctuation">{</span>      textDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'textArea'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div contentEditable<span class="token operator">=</span><span class="token string">"true"</span>      id<span class="token operator">=</span><span class="token string">"textArea"</span>      onInput<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onChangeAtPerson<span class="token punctuation">}</span>      className<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>testArea<span class="token punctuation">}</span>      placeholder<span class="token operator">=</span><span class="token string">"请输入评论，可以@其他人"</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>com <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> com<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//TODO</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react redux-dva简析</title>
      <link href="2020/06/20/redux-dva/"/>
      <url>2020/06/20/redux-dva/</url>
      
        <content type="html"><![CDATA[<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>  React 是一个数据单项的JavaScript库，可以实现重复调用，全局修改全局生效，在这样的情况下我们就会涉及到数据的模块封装和数据隔离，由于react使用的是state的机制故而我们就想让react的state机制像闭包的数据隔离一样对不同组件的state进行单独封装，单独隔离，但是呢又可以全局引用，因此就出现了redux到dva等一系列的react的状态管理框架。</p><h4 id="最初史的state介绍"><a href="#最初史的state介绍" class="headerlink" title="最初史的state介绍"></a>最初史的state介绍</h4><p>  react用的比较多的朋友应该知道，redux的思想是视图与状态是一一对应的；但是呢redux的所有的状态，都保存在一个对象state里面；</p><p>  store：是一个数据池，redux会把所有的数据都放在里面，没有做数据隔离，而一个 State 对应一个 View。只要 State 相同，View 就相同。</p><p>  redux-saga和dva非常相似，可以把触发条件理解为action，具体业务处理是是reducer，那么我们触发事件只能通过action去操作整个store的状态，对业务来说，我们可以不需要知道reducer的具体实现，更新reducer对业务来说也是无感的。这样就把数据的处理和更新与业务分离开来，相互没有直接的依赖关系。</p><h5 id="redux-saga"><a href="#redux-saga" class="headerlink" title="redux-saga:"></a>redux-saga:</h5><ul><li>1.Redux 内里只需一个 Store,全局的数据都在这个大 Store 内里。Store 的 State 不能直接修正，每次只能返回一个新的 State。Redux 整了一个createStore函数来添加 Store。</li><li>2.同一个state里不能有相同的key，即同一个state里不能有两个List，虽然两个list是在不同的页面里使用。</li></ul><p>demo</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>action的代码如下：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> takeEvery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga'</span><span class="token punctuation">;</span>  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">'actionName'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>如果有多个saga函数来监听不同的action事件的情况：</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">import</span> <span class="token punctuation">{</span> takeEvery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga/effects'</span>  <span class="token comment" spellcheck="true">// action 1</span>  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">demo1</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// action 2</span>  <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">demo2</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 同时抛出它们</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">'actionName1'</span><span class="token punctuation">,</span> demo1<span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">'actionName2'</span><span class="token punctuation">,</span> demo2<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//yield 右边的任何表达式都会被求值，结果会被 yield 给调用者。</span></code></pre><ul><li>我们也可以在action函数中写fetch-request对接口进行调用，同时可以吐出到组件，yield为异步api时使用saga提供call()方法，我们可以在触发业务代码的地方使用then函数来接受api的返回数据也可以在action函数这里进行state处理。<br>这里要说明的是，一般我们都会在action函数这里做一层数据校验，对接口返回数据进行一个初步的检测。</li></ul><h5 id="1-接口校验"><a href="#1-接口校验" class="headerlink" title="1.接口校验"></a>1.接口校验</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> call <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga/effects'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Api <span class="token keyword">from</span> <span class="token string">'./path/to/api'</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fetchApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>Api<span class="token punctuation">.</span>fetch<span class="token punctuation">,</span> <span class="token string">'/products'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>code<span class="token operator">===</span><span class="token number">200</span><span class="token operator">||</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span>data  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-使用try…catch来处理错误，并统一提示处理"><a href="#2-使用try…catch来处理错误，并统一提示处理" class="headerlink" title="2.使用try…catch来处理错误，并统一提示处理"></a>2.使用try…catch来处理错误，并统一提示处理</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//错误统一处理</span><span class="token keyword">import</span> Api <span class="token keyword">from</span> <span class="token string">'./path/to/api'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga/effects'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ...</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">fetchApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>Api<span class="token punctuation">.</span>fetch<span class="token punctuation">,</span> <span class="token string">'/products'</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'resultSuccess'</span><span class="token punctuation">,</span> products <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'resultError'</span><span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-使用throw来抛出一个错误"><a href="#3-使用throw来抛出一个错误" class="headerlink" title="3.使用throw来抛出一个错误"></a>3.使用throw来抛出一个错误</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-saga/effects'</span><span class="token keyword">import</span> Api <span class="token keyword">from</span> <span class="token string">'...'</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> <span class="token function">fetchProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 期望一个 call 指令</span>assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>  iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token function">call</span><span class="token punctuation">(</span>Api<span class="token punctuation">.</span>fetch<span class="token punctuation">,</span> <span class="token string">'/products'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"fetchProducts should yield an Effect call(Api.fetch, './products')"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 创建一个模拟的 error 对象</span><span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 期望一个 dispatch 指令</span>assert<span class="token punctuation">.</span><span class="token function">deepEqual</span><span class="token punctuation">(</span>  iterator<span class="token punctuation">.</span><span class="token keyword">throw</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>  <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'resultError'</span><span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"fetchProducts should yield an Effect put({ type: 'PRODUCTS_REQUEST_FAILED', error })"</span><span class="token punctuation">)</span></code></pre><h5 id="redux-dva："><a href="#redux-dva：" class="headerlink" title="redux-dva："></a>redux-dva：</h5><p>学过React的都知道他的技术栈，各种库插件多的如天，所以每当你使用React的时候都需要引入很多的模块，配置好多数据，那么dva就是把这些用到的模块集成在一起，形成一定的架构规范。</p><p>1.dva 是 framework，不是 library库；<br>2.dva封装了redux，减少很多重复代码比如action reducers 等的重复编写。<br>3.dva的核心是module模块，通过module我们可以实现结构上的多个store来储存数据，saga是所有的都写在一个里面，这样就可以对不同的业务组件或者模块来分别管理和引用。<br>4.call, put其实是saga的写法，dva集成了集成了redux、redux-saga、react-router-redux、react-router。将initState、saga、reducer集成到一个model里面统一管理，对某个模块进行单独的维护，减少成本量。</p><h5 id="引入图文说明"><a href="#引入图文说明" class="headerlink" title="引入图文说明"></a>引入图文说明</h5><!-- ![dva.png](https://i.loli.net/2020/06/29/OkzifJLM7wGR1TZ.png) --><p><img src="https://i.loli.net/2020/06/29/9Zkes2tvRAHMxLf.png" alt="dva.png"></p><p>缺点：<br>1.如现在react-router已经到了4.x了，但是dva内置的版本却还是2.x，如果react-router升级就要在使用 dva 和使用新版本的组件上做出选择了。<br>2.可扩展性不强，后期升级也是个问题。</p><h5 id="引入连接器："><a href="#引入连接器：" class="headerlink" title="引入连接器："></a>引入连接器：</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'dva'</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> queryString <span class="token keyword">from</span> <span class="token string">'query-string'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> todoService <span class="token keyword">from</span> <span class="token string">'../services/todo'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  namespace<span class="token punctuation">:</span> <span class="token string">'storeA'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//model的命名空间key，全局唯一，用来识别调用或引入的store</span>   state<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//状态的初始值</span>     list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>     message<span class="token punctuation">:</span><span class="token string">"ffff"</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//类似于redux的 reducer 是一个纯函数用来处理同步函数。</span>  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>       <span class="token function">setList</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> list <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">{</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> message <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//处理请求等异步函数</span>  effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">*</span><span class="token function">addForm</span><span class="token punctuation">(</span><span class="token punctuation">{</span> payload<span class="token punctuation">:</span> value <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> select <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>todoService<span class="token punctuation">.</span>query<span class="token punctuation">,</span> value<span class="token punctuation">)</span>      <span class="token keyword">let</span> tempList <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">select</span><span class="token punctuation">(</span>state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>todo<span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'setList'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">*</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> payload<span class="token punctuation">:</span> message <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> select <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'setState'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'namespaceB/setState'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可控制其他model中的state</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//用于订阅某些数据 如：监听路由的变化等</span>  subscriptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> history <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 监听路由的变化，请求页面数据</span>      <span class="token keyword">return</span> history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> search <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> query <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">'addForm'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//路由名称</span>          <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'setList'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span>list<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//更新action</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><ul><li>namespace 代表命名空间，全局唯一</li><li>state 代表初始化数据是一个对象，通过props调用</li><li>reducer 就跟我们平时用的reducer一样，action事件触发的函数</li><li>effects 处理Api等异步问题</li><li>subscriptions 订阅，常用来监听</li></ul><h5 id="跨model的通信："><a href="#跨model的通信：" class="headerlink" title="跨model的通信："></a>跨model的通信：</h5><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'storeA/addLog'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>dispatch中的type/前面的是model的key（namespace）后面的才是action。<br>也可以在effects中通过key/action的方式来通知其他model更新state状态，达到跨model通行。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">*</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">{</span> payload<span class="token punctuation">:</span> message <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> select <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'setState'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'namespaceB/setState'</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> <span class="token punctuation">{</span> message <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可控制其他model中的state</span>  <span class="token punctuation">}</span></code></pre><h5 id="多任务的情况："><a href="#多任务的情况：" class="headerlink" title="多任务的情况："></a>多任务的情况：</h5><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">const</span> <span class="token punctuation">[</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token function">call</span><span class="token punctuation">(</span>service1<span class="token punctuation">,</span> param1<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">call</span><span class="token punctuation">(</span>service2<span class="token punctuation">,</span> param2<span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h5 id="model数据共享（共享state数据）"><a href="#model数据共享（共享state数据）" class="headerlink" title="model数据共享（共享state数据）"></a>model数据共享（共享state数据）</h5><p>在B的model中的effects中获取A的state，其中a为A的namespace，response 为A的state，如</p><pre class=" language-javascript"><code class="language-javascript">effects<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token operator">*</span><span class="token function">fetchResult</span><span class="token punctuation">(</span><span class="token punctuation">{</span> callback <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> select <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">select</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> _<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// response为A model中的state值</span>    <span class="token comment" spellcheck="true">// ···其他操作</span>    <span class="token comment" spellcheck="true">// yield put({ type: "saveEvents", payload:{response} });</span>    <span class="token comment" spellcheck="true">// if (callback) callback(response);</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以在B页面中connect A model取值。</p><h4 id="附：初始化"><a href="#附：初始化" class="headerlink" title="附：初始化:"></a>附：初始化:</h4><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">// 1. Initialize</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">dva</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  history<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定给路由用的 history，默认是 hashHistory</span>  initialState<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 指定初始数据，优先级高于 model 中的 state</span>  onError<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// effect 执行错误或 subscription 通过 done 主动抛错时触发，可用于管理全局出错状态。</span>  onAction<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在 action 被 dispatch 时触发</span>  onStateChange<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// state 改变时触发，可用于同步 state 到 localStorage，服务器端等</span>  onReducer<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 封装 reducer 执行。比如借助 redux-undo 实现 redo/undo</span>  onEffect<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 封装 effect</span>  onHmr<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 热替换相关</span>  extraReducers<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定额外的 reducer，比如 redux-form 需要指定额外的 form reducer</span>  extraEnhancers<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定额外的 StoreEnhancer ，比如结合 redux-persist 的使用</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2. Plugins</span>  <span class="token comment" spellcheck="true">// app.use({});//也可以可配置hooks的相关</span>  <span class="token comment" spellcheck="true">// 3. Model</span>  <span class="token comment" spellcheck="true">// app.model(require('./models/example').default);</span>  <span class="token comment" spellcheck="true">// 4. Router</span>  app<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 5. Start</span>  app<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>挂载组件时，dva中的state通过connect将model、状态数据与组件相连。通过dispatch 调用key/action来触发model。这样就形成一个完整的数据流向。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>dva 帮你自动化了Redux 架构一些繁琐的设置，比如上面所说的redux store 的创建，中间件的配置，路由的初始化等都自动生成好了。</p><p>dva 降低了组件之间数据之间的的耦合度，可以对单个模块进行封装单独的model通过connect来连接，模块数据单独设置清晰易维护。</p><p>dva编写方便，基本不需要过多的配置，提高团队多人开发的效率。</p><p>dva配合umi达到了开箱即用的状态</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 储存 </tag>
            
            <tag> 数据隔离 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react顺滑拖动实现</title>
      <link href="2020/05/15/react-smooth-dnd/"/>
      <url>2020/05/15/react-smooth-dnd/</url>
      
        <content type="html"><![CDATA[<h4 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h4><p>1.react-smooth-dnd是一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&amp;d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速，提高了拖动的动画效果。</p><p>2.此库是在基于smooth-dnd库开发的React拖动效果组件。</p><p>3.npm 安装 <code>npm install react-smooth-dnd</code>；</p><p>4.鉴于可以查到的文档都是英文的，而且demo都残缺不全，本文进行了中文归纳和详细案例介绍；</p><p>5.本文主要介绍基于react引入的方式来写的demo；</p><p><img src="https://i.loli.net/2020/05/18/VpDJzQ4938yr5TO.jpg" alt="列表拖动排序.jpg"></p><p>6.目前该库还在维护中，有1.4k星，使用还不错，目前没发现bug，兼容Chrome浏览器<br><img src="https://i.loli.net/2020/05/18/xhY1ElczrJBuidj.jpg" alt="gitHubInfo.jpg"></p><h4 id="二、一个简单的demo"><a href="#二、一个简单的demo" class="headerlink" title="二、一个简单的demo"></a>二、一个简单的demo</h4><p>本案例是一个简单的引入和样式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Container<span class="token punctuation">,</span> Draggable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-smooth-dnd'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SimpleDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Container onDrop<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onDrop<span class="token punctuation">}</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Draggable key<span class="token operator">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>我是一个可拖动的元素，拖拖试试看<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Draggable<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>下面文章就介绍详细的使用方法。。。</p><h3 id="三、Dom引入"><a href="#三、Dom引入" class="headerlink" title="三、Dom引入"></a>三、Dom引入</h3><p>引入标签解释：</p><ul><li><p>Container 指的是拖动的容器，即可拖动的有效使用范围,它的内部可有有多个<code>&lt;Draggable&gt;</code>标签。</p></li><li><p>Draggable 指的是可拖动元素，在页面中把可拖动的内容用<code>&lt;Draggable&gt;</code>标签包裹后，该标签就可以脱离文档进行拖动。</p></li></ul><ul><li>用map实现的拖动内部元素<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Container onDrop<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onDrop<span class="token punctuation">}</span><span class="token operator">></span>  <span class="token punctuation">{</span>itemList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Draggable key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">...</span><span class="token comment" spellcheck="true">//你的拖动代码块</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Draggable<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre></li></ul><h3 id="四、Container-常用API"><a href="#四、Container-常用API" class="headerlink" title="四、Container 常用API"></a>四、Container 常用API</h3><h4 id="1-groupName"><a href="#1-groupName" class="headerlink" title="1.groupName"></a>1.groupName</h4><p>解释：定义当前拖动容器的名称（唯一性），如果代码中有多个<code>groupName=&quot;col&quot;</code> 则表示这几个拖动区域中的内容是相互之间可以拖动。比如我们要实现一个跨组拖动。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Container groupName<span class="token operator">=</span><span class="token string">"col"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="2-behaviour的使用"><a href="#2-behaviour的使用" class="headerlink" title="2.behaviour的使用"></a>2.behaviour的使用</h4><p>解释：当前容器中的元素拖动后，本容器中的元素状态。标示当前容器状态；</p><p>可选值：<code>move</code>（默认，移动）、<code>copy</code>（复制）、<code>drop-zone</code>（跌落）、<code>contain</code>（包含）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//实现复制本容器中的内容而不是move拖动离开</span><span class="token operator">&lt;</span>Container behaviour<span class="token operator">=</span><span class="token string">"copy"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="3-lockAxis的使用"><a href="#3-lockAxis的使用" class="headerlink" title="3.lockAxis的使用"></a>3.lockAxis的使用</h4><p>解释：设置限制当前拖动的方向。</p><p>可选值：<code>x</code>、<code>y</code>，表示只能x轴或者y轴方向拖动；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//限制该拖动只能y轴方向进行拖动</span><span class="token operator">&lt;</span>Container lockAxis<span class="token operator">=</span><span class="token string">"y"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="4-dragClass的使用"><a href="#4-dragClass的使用" class="headerlink" title="4.dragClass的使用"></a>4.dragClass的使用</h4><p>解释：拖动元素被拖动时可添加的样式，（拿起来样式）；可以使用react的Style进行引入css</p><p>可以设置字体，缩放，旋转等<code>css</code>的样式实现拖动过程中的样式；</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.card_ghost</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FFF</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1.5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">-ms-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1.5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* IE 9 */</span>    <span class="token property">-moz-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1.5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* Firefox */</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1.5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Safari 和 Chrome */</span>    <span class="token property">-o-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">1.5</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* Opera */</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">15</span>px grey<span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Container dragClass<span class="token operator">=</span><span class="token punctuation">{</span>style<span class="token punctuation">.</span>card_ghost<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="5-dropClass的使用"><a href="#5-dropClass的使用" class="headerlink" title="5.dropClass的使用"></a>5.dropClass的使用</h4><p>解释：拖动释放时的样式，写法如上；</p><h4 id="6-dropPlaceholder的使用"><a href="#6-dropPlaceholder的使用" class="headerlink" title="6.dropPlaceholder的使用"></a>6.dropPlaceholder的使用</h4><p>解释：拖动时的占位效果</p><p>当拖动元素拖走时或进入其他位置时，用于占位当前阴影配置</p><p>参数：<code>className</code>, <code>animationDuration</code>, <code>showOnTop</code>;</p><p>calssNmae： 占位元素的延时<br>animationDuration： 延时<br>showOnTop： （暂时还未知作用）</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.cards_drop_preview</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#DDDFE3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Container     dropPlaceholder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>        animationDuration<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//动画延时</span>        showOnTop<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//暂时还不知道作用</span>        className<span class="token punctuation">:</span> style<span class="token punctuation">.</span>cards_drop_preview<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//占位元素样式</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="7-dragBeginDelay的使用"><a href="#7-dragBeginDelay的使用" class="headerlink" title="7.dragBeginDelay的使用"></a>7.dragBeginDelay的使用</h4><p>解释：延时拖动，时间单位为毫秒。按下项目后延迟开始拖动。在延迟超过5px之前移动光标将取消拖动。</p><p>防止有误操作的情况发生；也可用于该item上既有拖动又又其他事件，延时可以区分需要触发的是那种事件。</p><h4 id="8-onDragStart、onDragEnd、onDropReady、onDrop的使用"><a href="#8-onDragStart、onDragEnd、onDropReady、onDrop的使用" class="headerlink" title="8.onDragStart、onDragEnd、onDropReady、onDrop的使用"></a>8.onDragStart、onDragEnd、onDropReady、onDrop的使用</h4><p>解释：<br>onDragStart：拖动开始后出发该函数；<br>onDragEnd：拖动结束；<br>onDropReady：拖动ready；<br>onDrop：拖动释放；</p><p>参数：<br><code>isSource</code> : boolean (true/false) 如果是从其他容器中拖动来的则是false<br><code>payload</code> : object （ { removedIndex, addedIndex, payload } ）<br>    - removedIndex移走元素的索引；<br>    - addedIndex添加元素的索引；<br>    - payload移动的元素数据，配合<code>getChildPayload</code>函数使用；<br><code>willAcceptDrop</code> : boolean 如果拖动的项可以放入容器中，则为true，否则为false。</p><p>可以认为是辅助函数，用于获取动作结束后的一些状态事件获取。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//拖动开始后出发</span>onDragStart <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>isSource<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> willAcceptDrop<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> removedIndex<span class="token punctuation">,</span> addedIndex<span class="token punctuation">,</span> payload <span class="token punctuation">}</span> <span class="token operator">=</span> dragResult<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>removedIndex <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> addedIndex <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> itemToAdd <span class="token operator">=</span> payload<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>removedIndex <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      itemToAdd <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>removedIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>addedIndex <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>addedIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> itemToAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dataList<span class="token punctuation">:</span> result <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Container onDragStart<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onDragStart<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="9-getChildPayload的使用"><a href="#9-getChildPayload的使用" class="headerlink" title="9.getChildPayload的使用"></a>9.getChildPayload的使用</h4><p>解释：设置上述的payload的值</p><p>getChildPayload 函数return一个自定义的值；</p><p>用来记录当前拖动元素的信息，参数是index即Container中dataList的索引，当释放（onDrop）函数触发是，payLoad会自动带入该参数，用于做数据处理。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//拖动开始后出发</span>getChildPayload <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前拖动的索引</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>Container getChildPayload<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getChildPayload<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>Draggable<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span></code></pre><h4 id="10-onDragEnter、onDragLeave的使用"><a href="#10-onDragEnter、onDragLeave的使用" class="headerlink" title="10.onDragEnter、onDragLeave的使用"></a>10.onDragEnter、onDragLeave的使用</h4><p>解释： 监控拖动进入或者离开响应区时的状态</p><p>函数参数数据和和7一样，同上onDragStart；</p><p>该功能可以在拖动的中间触发事件，进行一些业务逻辑处理</p><h3 id="五、Draggable-API"><a href="#五、Draggable-API" class="headerlink" title="五、Draggable API"></a>五、Draggable API</h3><p>Draggable可以使用render进行渲染，默认情况下，Draggable对组件根使用div元素。<br>如果设置了render函数，则Draggable的子属性将被忽略，而render的返回值将用于render Draggable。</p><p>return 是一个React的dom元素集（React Element）；</p><p>demo</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Draggable render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>li<span class="token operator">></span>      <span class="token operator">...</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h3 id="六、典型Demo"><a href="#六、典型Demo" class="headerlink" title="六、典型Demo"></a>六、典型Demo</h3><p>我们最长使用的就是<code>dragClass</code>、<code>getChildPayload</code>、<code>onDrop</code>这些函数；</p><p>下面来个拖动排序的demo实现拖动排序</p><p>拖动排序最重要的时顺序的索引值，如果先删除了就会导致索引对应不上了，这点要特别注意</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Container<span class="token punctuation">,</span> Draggable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-smooth-dnd'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SimpleDemo</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            dataList<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//排序数组</span>                <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'第1个'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'第2个'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'第3个'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                    name<span class="token punctuation">:</span> <span class="token string">'第4个'</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置拖动内容</span>    getChildPayload <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> dataList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            item<span class="token punctuation">:</span>dataList<span class="token punctuation">[</span>index<span class="token punctuation">]</span>            index<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拖动释放时出发重新排序事件</span>    onDrop <span class="token operator">=</span> <span class="token punctuation">(</span>dragResult<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> removedIndex<span class="token punctuation">,</span> addedIndex<span class="token punctuation">,</span> payload <span class="token punctuation">}</span> <span class="token operator">=</span> dragResult<span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> dataList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">let</span> resutl <span class="token operator">=</span> dataList<span class="token punctuation">;</span>        <span class="token keyword">let</span> itemToAdd <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>removedIndex <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            itemToAdd <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>removedIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addedIndex <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>addedIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> itemToAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>dataList<span class="token punctuation">:</span> result<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> <span class="token punctuation">{</span> dataList <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span>Container                 onDrop<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onDrop<span class="token punctuation">}</span>                getChildPayload<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getChildPayload<span class="token punctuation">}</span>            <span class="token operator">></span><span class="token punctuation">{</span>                dataList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">&lt;</span>Draggable key<span class="token operator">=</span><span class="token punctuation">{</span>k<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>                        <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>k<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>Draggable<span class="token operator">></span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Container<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Clock <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>更多详细使用请参考如下gitHub地址<br>github demo地址：<a href="https://kutlugsahin.github.io/smooth-dnd-demo/">https://kutlugsahin.github.io/smooth-dnd-demo/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 拖动 </tag>
            
            <tag> drag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论坛评论@功能</title>
      <link href="2020/04/26/atPerson/"/>
      <url>2020/04/26/atPerson/</url>
      
        <content type="html"><![CDATA[<h1 id="页面-功能实现"><a href="#页面-功能实现" class="headerlink" title="页面@功能实现"></a>页面@功能实现</h1><p>本文demo： <a href="https://github.com/duanweiqiang/atPerson" title="gitHub">gitHub地址</a></p><p>需要用到的知识：</p><h3 id="1-将div设置成可输入状态"><a href="#1-将div设置成可输入状态" class="headerlink" title="1.将div设置成可输入状态"></a>1.将div设置成可输入状态</h3><ul><li>contentEditable 属性用于设置或返回元素的内容是否可编辑。</li><li>这样就可以在div中使用标签来表示@中的人（只是为了可以在输入框中使用标签）</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">contentEditable</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>    <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>textArea<span class="token punctuation">"</span></span>    <span class="token attr-name">onInput</span><span class="token attr-value"><span class="token punctuation">=</span>{this.onChangeAtPerson}</span>     <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span>{style.testArea}</span>    <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入评论，可以@其他人<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="2-创建range-对象"><a href="#2-创建range-对象" class="headerlink" title="2.创建range 对象"></a>2.创建range 对象</h3><ul><li>用来控制光标是否可以进入@的dom</li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-操作range对象"><a href="#3-操作range对象" class="headerlink" title="3.操作range对象"></a>3.操作range对象</h3><ul><li>用来控制光标是否可以进入@的dom</li></ul><p><strong>选择节点</strong></p><p><code>selectNode()</code> :选择整个节点，包括子节点</p><p><code>selectNodeContents()</code>  选择节点的子节点</p><ul><li>example:<pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- html --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>       world!  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">var</span> range1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      range2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      p1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  range1<span class="token punctuation">.</span><span class="token function">selectNode</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;p id="p1">&lt;b>Hello&lt;/b> world!&lt;/p></span>  range2<span class="token punctuation">.</span><span class="token function">selectNodeContents</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//&lt;b>Hello&lt;/b> world!</span></code></pre></li></ul><p><code>setStart()</code>、<code>setEnd()</code>：这里选择节点和鼠标选中一样，这个是自动选中</p><blockquote><p>方法都接受两个参数：一个参照节点，一个节点偏移量</p></blockquote><ul><li>example<pre class=" language-html"><code class="language-html">  <span class="token comment" spellcheck="true">&lt;!-- html --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> </code></pre><pre class=" language-javascript"><code class="language-javascript">  <span class="token comment" spellcheck="true">//js</span>  range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  p1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  range<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  range<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//选中的将会是 llo wo（注意！以0为基数，空格也算一个文本字符，占1个偏移量）</span></code></pre></li></ul><p><strong>操作节点</strong></p><p><code>deleteContents()</code>: 这个方法能够从文档中删除范围缩包含的内容</p><p><code>extractContents()</code>: 会删除并返回文档片段</p><p><code>CloneContents()</code>: 创建范围对象的一个副本，不会影响原来的节点</p><blockquote><p>复制 DOM 范围  ： 可以使用 cloneRange()方法复制范围。这个方法会创建调用它的范围的一个副本。<br><code>var newRange = range.cloneRange();</code></p></blockquote><p><code>insertNode()</code>: 向范围选区的开始处插入一个节点</p><p><code>surroundContents()</code>: 环绕范围插入内容 </p><p>在使用完范围之后，最好是调用 <code>detach()</code> 方法，以便从创建范围的文档中分离出该范围。调用<br><code>detach()</code>之后，就可以放心地解除对范围的引用，从而让垃圾回收机制回收其内存了。来看下面的<br>例子</p><p><code>range.detach();</code> //从文档中分离<br><code>range = null;</code> //解除引用<br>推荐在使用范围的最后再执行这两个步骤。一旦分离范围，就不能再恢复使用了。</p><h3 id="4-Selection-对象"><a href="#4-Selection-对象" class="headerlink" title="4.Selection 对象"></a>4.Selection 对象</h3><ul><li>这是一个window对象</li><li>返回一个 <code>Selection</code> 对象，表示用户选择的文本范围或光标的当前位置。</li><li>这里使用它来获取当前光标所处的dom</li></ul><p>用法:</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">const</span> selection <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非react使用</span>    <span class="token keyword">const</span> selection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>anchorNode <span class="token operator">=</span> selection<span class="token punctuation">.</span>anchorNode<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前贯标所在位置的dom（使用anchorNode子方法）</span></code></pre><h3 id="5-dom中设置-人员的演示"><a href="#5-dom中设置-人员的演示" class="headerlink" title="5.dom中设置@人员的演示"></a>5.dom中设置@人员的演示</h3><ul><li>本文通过<code>&lt;span&gt;</code>标签来实现</li></ul><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name">         <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#F4F4F6</span><span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">3</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">3</span>px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>${item.id}</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>${item.name}</span><span class="token punctuation">></span></span> //react方法        @${item.name}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="6-通过selection来替换原来的-字符"><a href="#6-通过selection来替换原来的-字符" class="headerlink" title="6.通过selection来替换原来的@字符"></a>6.通过selection来替换原来的@字符</h3><blockquote><p>1.先获取当前光标的位置<br>2.再获取当前输入框的dom<br>3.分析dom里的结构<br>4.将dom中的光标位置的@替换成<code>atPresonDom</code>中的结构<br>5.将生成的<code>reasonDom</code>插入到dom中<br>6.再将光标置于当前替换的<code>&lt;span&gt;</code>标签之后</p></blockquote><pre class=" language-javascript"><code class="language-javascript">selectPerson <span class="token operator">=</span> item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> anchorNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>anchorNode<span class="token punctuation">;</span>    <span class="token keyword">const</span> selectStartIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectStartIndex<span class="token punctuation">;</span>    <span class="token keyword">const</span> atPresonDom <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&amp;nbsp;&lt;span style="background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;" id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">>@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/span>&amp;nbsp;`</span></span><span class="token punctuation">;</span>    <span class="token keyword">let</span> reasonDom <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> targetDomIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span><span class="token operator">...</span>textDom<span class="token punctuation">.</span>childNodes<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>each<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>each<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">'SPAN'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        reasonDom <span class="token operator">+</span><span class="token operator">=</span> each<span class="token punctuation">.</span>outerHTML<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>anchorNode <span class="token operator">===</span> each<span class="token punctuation">)</span> <span class="token punctuation">{</span>        targetDomIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">const</span> tempEachDom <span class="token operator">=</span> each<span class="token punctuation">;</span>        <span class="token keyword">const</span> dom1 <span class="token operator">=</span> tempEachDom<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> selectStartIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> dom2 <span class="token operator">=</span> atPresonDom<span class="token punctuation">;</span>        <span class="token keyword">const</span> dom3 <span class="token operator">=</span> tempEachDom<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>          selectStartIndex <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectText<span class="token punctuation">.</span>length<span class="token punctuation">,</span>          each<span class="token punctuation">.</span>data<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        reasonDom <span class="token operator">+</span><span class="token operator">=</span> dom1 <span class="token operator">+</span> dom2 <span class="token operator">+</span> dom3<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        reasonDom <span class="token operator">+</span><span class="token operator">=</span> each<span class="token punctuation">.</span>data<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    textDom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> reasonDom<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//插入dom</span>    <span class="token keyword">const</span> textDomChildList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>textDom<span class="token punctuation">.</span>childNodes<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> textDomLastIndex <span class="token operator">=</span>      textDomChildList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> textDomChildList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> targetIndex <span class="token operator">=</span>      targetDomIndex <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">></span> textDomLastIndex        <span class="token operator">?</span> textDomLastIndex        <span class="token punctuation">:</span> targetDomIndex <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> targetAnchorNode <span class="token operator">=</span> textDomChildList<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> selection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    range<span class="token punctuation">.</span><span class="token function">setStart</span><span class="token punctuation">(</span>targetAnchorNode<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    range<span class="token punctuation">.</span><span class="token function">setEnd</span><span class="token punctuation">(</span>targetAnchorNode<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    selection<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    selection<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectText <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> personDataList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectStartIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="7-键盘控制选中-后边附录键盘事件"><a href="#7-键盘控制选中-后边附录键盘事件" class="headerlink" title="7.键盘控制选中(后边附录键盘事件)"></a>7.键盘控制选中(后边附录键盘事件)</h3><ul><li>通过键盘来控制循环选中下拉人员列表</li><li>键盘控制删除整体模块</li><li>键盘控制光标进入空能</li></ul><pre class=" language-javascript"><code class="language-javascript">keydownEvent <span class="token operator">=</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//键盘事件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> selection <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>anchorNode <span class="token operator">=</span> selection<span class="token punctuation">.</span>anchorNode<span class="token punctuation">;</span>      <span class="token keyword">const</span> range <span class="token operator">=</span> selection<span class="token punctuation">.</span><span class="token function">getRangeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 删除@模块</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>focusNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">'SPAN'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        textDom<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>range<span class="token punctuation">.</span>startContainer<span class="token punctuation">.</span>parentElement<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//up&amp;down</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> personDataList<span class="token punctuation">,</span> curSelectItem <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>      personDataList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//有下拉是阻止冒泡</span>      <span class="token keyword">let</span> targetIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      personDataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        targetIndex <span class="token operator">=</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> curSelectItem<span class="token punctuation">.</span>id <span class="token operator">?</span> index <span class="token punctuation">:</span> targetIndex<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//down</span>        targetIndex <span class="token operator">=</span> targetIndex <span class="token operator">===</span> personDataList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> targetIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">38</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//up</span>        targetIndex <span class="token operator">=</span> targetIndex <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> personDataList<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">:</span> targetIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> curSelectItem<span class="token punctuation">:</span> personDataList<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> curSelectItem <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>      curSelectItem <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectPerson</span><span class="token punctuation">(</span>curSelectItem<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> curSelectItem<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="8-当光标删除到整体模块处理"><a href="#8-当光标删除到整体模块处理" class="headerlink" title="8.当光标删除到整体模块处理"></a>8.当光标删除到整体模块处理</h3><p>当光标识别到进入@整体模块时，需要整体删除</p><p>这里使用的时<code>&lt;span&gt;</code>标签来表示的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>focusNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>nodeName <span class="token operator">===</span> <span class="token string">'SPAN'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//不允许编辑@人员</span>    textDom<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>selection<span class="token punctuation">.</span>focusNode<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> personDataList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>selectStartIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="9-效果图"><a href="#9-效果图" class="headerlink" title="9.效果图"></a>9.效果图</h3><p><img src="http://ww1.sinaimg.cn/large/987eaf20gy1ge7m81xiq0j21dq0m8n17.jpg" alt="demo2.png"></p><h1 id="附：js键盘事件全面控制详解"><a href="#附：js键盘事件全面控制详解" class="headerlink" title="附：js键盘事件全面控制详解"></a>附：js键盘事件全面控制详解</h1><p>主要分四个部分<br>第一部分：浏览器的按键事件<br>第二部分：兼容浏览器<br>第三部分：代码实现和优化<br>第四部分：总结</p><h2 id="第一部分：浏览器的按键事件"><a href="#第一部分：浏览器的按键事件" class="headerlink" title="第一部分：浏览器的按键事件"></a>第一部分：浏览器的按键事件</h2><p>1.用js实现键盘记录，要关注浏览器的三种按键事件类型，即<code>keydown</code>，<code>keypress</code>和<code>keyup</code>，它们分别对应<code>onkeydown</code>、<code>onkeypress</code>和<code>onkeyup</code>这三个事件句柄。一个典型的按键会产生所有这三种事件，依次是<code>keydown</code>，<code>keypress</code>，然后是按键释放时候的<code>keyup</code>。</p><p>2.在这3种事件类型中，<code>keydown</code>和<code>keyup</code>比较底层，而<code>keypress</code>比较高级。这里所谓的高级是指，当用户按下<code>shift + 1</code>时，<code>keypress</code>是对这个按键事件进行解析后返回一个可打印的“!”字符，而<code>keydown</code>和<code>keyup</code>只是记录了<code>shift + 1</code>这个事件。</p><p>3.但是<code>keypress</code>只能针对一些可以打印出来的字符有效，而对于功能按键，如<code>F1-F12</code>、<code>Backspace</code>、<code>Enter</code>、<code>Escape</code>、<code>PageUP</code>、<code>PageDown</code>和箭头方向等，就不会产生<code>keypress</code>事件，但是可以产生<code>keydown</code>和<code>keyup</code>事件。然而在FireFox中，功能按键是可以产生<code>keypress</code>事件的。</p><p>4.传递给<code>keydown</code>、<code>keypress</code>和<code>keyup</code>事件句柄的事件对象有一些通用的属性。如果<code>Alt</code>、<code>Ctrl</code>或<code>Shift</code>和一个按键一起按下，这通过事件的<code>altKey</code>、<code>ctrlKey</code>和<code>shiftKey</code>属性表示，这些属性在FireFox和IE中是通用的。</p><h2 id="第二部分：兼容浏览器"><a href="#第二部分：兼容浏览器" class="headerlink" title="第二部分：兼容浏览器"></a>第二部分：兼容浏览器</h2><ul><li>凡是涉及浏览器的js，就都要考虑浏览器兼容的问题。</li><li>目前常用的浏览器主要有基于IE和基于Mozilla两大类。Maxthon是基于IE内核的，而FireFox和Opera是基于Mozilla内核的。</li></ul><h3 id="2-1-事件的初始化"><a href="#2-1-事件的初始化" class="headerlink" title="2.1 事件的初始化"></a>2.1 事件的初始化</h3><p>首先需要了解的是如何初始化该事件，基本语句如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">keyDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> keyDown<span class="token punctuation">;</span></code></pre><p><strong><em>react 绑定</em></strong></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//直接绑定在原生事件上，这个一般是用来捕捉编辑的时候的事件，用的不多</span>    <span class="token operator">&lt;</span>textarea onKeyDown<span class="token operator">=</span><span class="token punctuation">{</span>e<span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>keyCode <span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//通过声明周期直接绑定到document的事件上，这个方式一般用来做快捷键比较多</span>    <span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">KeyBind</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>        <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"keydown"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onKeyDown<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"keydown"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onKeyDown<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        onKeyDown <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span> e<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>回车事件                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>当浏览器读到这个语句时，无论按下键盘上的哪个键，都将呼叫KeyDown()函数。</p><h3 id="2-2-FireFox和Opera的实现方法"><a href="#2-2-FireFox和Opera的实现方法" class="headerlink" title="2.2 FireFox和Opera的实现方法"></a>2.2 FireFox和Opera的实现方法</h3><p>FireFox和Opera等程序实现要比IE麻烦，所以这里先描述一下。</p><p><code>keyDown()</code>函数有一个隐藏的变量–一般的，我们使用字母“e”来表示这个变量。  </p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">keyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  </code></pre><p>变量e表示发生击键事件，寻找是哪个键被按下，要使用which这个属性：  </p><pre class=" language-javascript"><code class="language-javascript">    e<span class="token punctuation">.</span>which  </code></pre><p><code>e.which</code>将给出该键的索引值，把索引值转化成该键的字母或数字值的方法需要用到静态函数<code>String.fromCharCode()</code>，如下： </p><pre class=" language-javascript"><code class="language-javascript">    String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>which<span class="token punctuation">)</span></code></pre><p>把上面的语句放在一起，我们可以在FireFox中得到被按下的是哪一个键：  </p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">keyDown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> keycode <span class="token operator">=</span> e<span class="token punctuation">.</span>which<span class="token punctuation">;</span>          <span class="token keyword">var</span> realkey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>which<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">　　alert</span><span class="token punctuation">(</span><span class="token string">"按键码: "</span> <span class="token operator">+</span> keycode <span class="token operator">+</span> <span class="token string">" 字符: "</span> <span class="token operator">+</span> realkey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> keyDown<span class="token punctuation">;</span></code></pre><h3 id="2-3-IE的实现方法"><a href="#2-3-IE的实现方法" class="headerlink" title="2.3 IE的实现方法"></a>2.3 IE的实现方法</h3><p>IE的程序不需要e变量，用<code>window.event.keyCode</code>来代替<code>e.which</code>，把键的索引值转化为真实键值方法类似：<code>String.fromCharCode(event.keyCode)</code>，程序如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">keyDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> keycode <span class="token operator">=</span> event<span class="token punctuation">.</span>keyCode<span class="token punctuation">;</span>          <span class="token keyword">var</span> realkey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按键码: "</span> <span class="token operator">+</span> keycode <span class="token operator">+</span> <span class="token string">" 字符: "</span> <span class="token operator">+</span> realkey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span> keyDown<span class="token punctuation">;</span></code></pre><h3 id="2-4-判断浏览器类型"><a href="#2-4-判断浏览器类型" class="headerlink" title="2.4 判断浏览器类型"></a>2.4 判断浏览器类型</h3><p>上面了解了在各种浏览器里是如何实现获取按键事件对象的方法，那么下面需要判断浏览器类型，这个方法很多，有比较方便理解的，也有很巧妙的办法，先说一般的方法：就是利用<code>navigator</code>对象的<code>appName属性</code>，当然也可以用<code>userAgent</code>属性，这里用<code>appName</code>来实现判断浏览器类型，IE和Maxthon的appName是“Microsoft Internet Explorer” ,而FireFox和Opera的appName是“Netscape”，所以一个功能比较简单的代码如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">keyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>appName <span class="token operator">==</span> <span class="token string">"Microsoft Internet Explorer"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> keycode <span class="token operator">=</span> event<span class="token punctuation">.</span>keyCode<span class="token punctuation">;</span>              <span class="token keyword">var</span> realkey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>keyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> keycode <span class="token operator">=</span> e<span class="token punctuation">.</span>which<span class="token punctuation">;</span>              <span class="token keyword">var</span> realkey <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>which<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按键码: "</span> <span class="token operator">+</span> keycode <span class="token operator">+</span> <span class="token string">" 字符: "</span> <span class="token operator">+</span> realkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> keyUp<span class="token punctuation">;</span></code></pre><p>比较简洁的方法是：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">keyUp</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> currKey<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> e<span class="token operator">=</span>e<span class="token operator">||</span>event<span class="token punctuation">;</span>        currKey<span class="token operator">=</span>e<span class="token punctuation">.</span>keyCode<span class="token operator">||</span>e<span class="token punctuation">.</span>which<span class="token operator">||</span>e<span class="token punctuation">.</span>charCode<span class="token punctuation">;</span>        <span class="token keyword">var</span> keyName <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>currKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"按键码: "</span> <span class="token operator">+</span> currKey <span class="token operator">+</span> <span class="token string">" 字符: "</span> <span class="token operator">+</span> keyName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span> keyUp<span class="token punctuation">;</span></code></pre><p>上面这种方法比较巧妙，简单地解释一下：</p><blockquote><p>首先，e=e||event;这句代码是为了进行浏览器事件对象获取的兼容。js中这句代码的意思是，如果在FireFox或Opera中，隐藏的变量e是存在的，那么e||event返回e，如果在IE中，隐藏变量e是不存在，则返回event。<br>其次，<code>currKey=e.keyCode||e.which||e.charCode</code>;这句是为了兼容浏览器按键事件对象的按键码属性（详见第三部分），如IE中，只有keyCode属性，而FireFox中有which和charCode属性，Opera中有keyCode和which属性等。<br>上述代码只是兼容了浏览器，获取了keyup事件对象，简单的弹出了按键码和按键的字符，但是问题出现了，当你按键时，字符键都是大写的，而按shift键时，显示的字符很奇怪，所以就需要优化一下代码了。</p></blockquote><h2 id="第三部分：代码实现和优化"><a href="#第三部分：代码实现和优化" class="headerlink" title="第三部分：代码实现和优化"></a>第三部分：代码实现和优化</h2><h3 id="3-1-按键事件的按键码和字符码"><a href="#3-1-按键事件的按键码和字符码" class="headerlink" title="3.1 按键事件的按键码和字符码"></a>3.1 按键事件的按键码和字符码</h3><p>在IE中，只有一个<code>keyCode</code>属性，并且它的解释取决于事件类型。对于<code>keydown</code>来说，<code>keyCode</code>存储的是按键码，对于 <code>keypress</code>事件来说，<code>keyCode</code>存储的是一个字符码。而IE中没有<code>which</code>和<code>charCode</code>属性，所以<code>which和charCode</code>属性始终为<code>undefined</code>。</p><p>FireFox中keyCode始终为0，时间<code>keydown</code>/<code>keyup</code>时，<code>charCode</code>=0，which为按键码。事件<code>keypress</code>时，which和charCode二者的值相同，存储了字符码。</p><p>在Opera中，<code>keyCode</code>和<code>which</code>二者的值始终相同，在<code>keydown/keyup</code>事件中，它们存储按键码，在<code>keypress</code>时间中，它们存储字符码，而charCode没有定义，始终是undefined。</p><h3 id="3-2-用keydown-keyup还是keypress"><a href="#3-2-用keydown-keyup还是keypress" class="headerlink" title="3.2 用keydown/keyup还是keypress"></a>3.2 用keydown/keyup还是keypress</h3><p>第一部分已经介绍了<code>keydown/keyup</code>和<code>keypress</code>的区别，有一条比较通用的规则，<code>keydown</code>事件对于功能按键来说是最有用的，而<code>keypress</code>事件对于可打印按键来说是最有用的。</p><p>键盘记录主要是针对于可打印字符和部分功能按键，所以<code>keypress</code>是首选，然而正如第一部分提到的，IE中<code>keypress</code>不支持功能按键，所以应该用<code>keydown/keyup</code>事件来进行补充。</p><h3 id="3-3-代码的实现"><a href="#3-3-代码的实现" class="headerlink" title="3.3 代码的实现"></a>3.3 代码的实现</h3><p>总体思路，用keypress事件对象获取按键字符，用keydown事件获取功能字符，如<code>Enter</code>，<code>Backspace</code>等。</p><p>代码实现如下所示</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">!</span>DOCTYPE HTML PUBLIC <span class="token string">"-//W3C//DTD HTML 4.0Transitional//EN"</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>js 按键记录<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Generator"</span> CONTENT<span class="token operator">=</span><span class="token string">"EditPlus"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Author"</span> CONTENT<span class="token operator">=</span><span class="token string">"Duke"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Keywords"</span> CONTENT<span class="token operator">=</span><span class="token string">"js 按键记录"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"Description"</span> CONTENT<span class="token operator">=</span><span class="token string">"js 按键 记录"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> keystring <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录按键的字符串</span>    <span class="token keyword">function</span> <span class="token function">$</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> document<span class="token punctuation">.</span><span class="token function">getElementByIdx_x</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">?</span>document<span class="token punctuation">.</span><span class="token function">getElementByIdx_x</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">keypress</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> currKey<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>CapsLock<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token operator">=</span>e<span class="token operator">||</span>event<span class="token punctuation">;</span>　      currKey<span class="token operator">=</span>e<span class="token punctuation">.</span>keyCode<span class="token operator">||</span>e<span class="token punctuation">.</span>which<span class="token operator">||</span>e<span class="token punctuation">.</span>charCode<span class="token punctuation">;</span>　      CapsLock<span class="token operator">=</span>currKey<span class="token operator">>=</span><span class="token number">65</span><span class="token operator">&amp;&amp;</span>currKey<span class="token operator">&lt;=</span><span class="token number">90</span><span class="token punctuation">;</span>　      　      <span class="token keyword">switch</span><span class="token punctuation">(</span>currKey<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//屏蔽了退格、制表、回车、空格、方向键、删除键</span>            <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">13</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">32</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>             <span class="token keyword">case</span> <span class="token number">46</span><span class="token punctuation">:</span>                keyName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>                keyName <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>currKey<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        keystring <span class="token operator">+</span><span class="token operator">=</span> keyName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">keydown</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> e<span class="token operator">=</span>e<span class="token operator">||</span>event<span class="token punctuation">;</span>        <span class="token keyword">var</span> currKey<span class="token operator">=</span>e<span class="token punctuation">.</span>keyCode<span class="token operator">||</span>e<span class="token punctuation">.</span>which<span class="token operator">||</span>e<span class="token punctuation">.</span>charCode<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currKey<span class="token operator">></span><span class="token number">7</span><span class="token operator">&amp;&amp;</span>currKey<span class="token operator">&lt;</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>currKey<span class="token operator">></span><span class="token number">31</span><span class="token operator">&amp;&amp;</span>currKey<span class="token operator">&lt;</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>currKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">8</span><span class="token punctuation">:</span> keyName <span class="token operator">=</span> <span class="token string">"[退格]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">9</span><span class="token punctuation">:</span> keyName <span class="token operator">=</span> <span class="token string">"[制表]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">13</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[回车]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">32</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[空格]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">33</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[PageUp]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">34</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[PageDown]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">35</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[End]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">36</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[Home]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">37</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[方向键左]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">38</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[方向键上]"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">39</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[方向键右]"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">40</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[方向键下]"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">46</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">"[删除]"</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token punctuation">:</span>keyName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            keystring <span class="token operator">+</span><span class="token operator">=</span> keyName<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>keystring<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">keyup</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>keystring<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>onkeypress<span class="token operator">=</span>keypress<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>onkeydown <span class="token operator">=</span>keydown<span class="token punctuation">;</span>    document<span class="token punctuation">.</span>onkeyup <span class="token operator">=</span>keyup<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"清空记录"</span> onclick<span class="token operator">=</span><span class="token string">"$('content').innerHTML = '';keystring = '';"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>请按下任意键查看键盘响应键值：<span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>代码分析：<br><code>$()</code>：根据ID获取dom<br><code>keypress(e)</code>：实现对字符码的截获，由于功能按键要用keydown获取，所以在keypress中屏蔽了这些功能按键。<br><code>keydown(e)</code>：主要是实现了对功能按键的获取。<br><code>keyup(e)</code>：展示截获的字符串。</p><p>代码基本上就算实现完成了！呵呵</p><h2 id="第四部分：总结"><a href="#第四部分：总结" class="headerlink" title="第四部分：总结"></a>第四部分：总结</h2><p>1.H5端键盘keyCode有部分缺失，使用是要特别注意一下<br>2.编写代码的最初目的是能够通过js记录按键，并返回一个字符串。</p><p>上述代码只是用js实现了基本的英文按键记录，对于汉字是无能为力，记录汉字，我能想到的办法，当然是用js，是用keydown和keyup记录底层按键事件，汉字解析当然无能为力。当然你可以用DOM的方式直接获取input中的汉字，但这已经离开了本文讨论的用按键事件实现按键记录的本意。</p><p>本文demo： <a href="https://github.com/duanweiqiang/atPerson" title="gitHub">gitHub地址</a></p><blockquote><p>上述代码还可以实现添加剪切板的功能，监控删除的功能等等。。。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> keyEvent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swig 使用指南</title>
      <link href="2020/03/22/swig/"/>
      <url>2020/03/22/swig/</url>
      
        <content type="html"><![CDATA[<p>nodeJS模版渲染引擎</p><h3 id="Swig-使用指南"><a href="#Swig-使用指南" class="headerlink" title="Swig 使用指南"></a>Swig 使用指南</h3><p>1.根据路劲渲染页面<br>2.面向对象的模板继承，页面复用动态页面快速上手功能强大。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>API</p><pre class=" language-javascript"><code class="language-javascript">    swig<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      allowErrors<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         autoescape<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      encoding<span class="token punctuation">:</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span>      filters<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      root<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      tags<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      extensions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>      tzOffset<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="options"><a href="#options" class="headerlink" title="options:"></a>options:</h3><p><strong>allowErrors:</strong> </p><p>默认值为 <code>false</code>。</p><p>将所有模板解析和编译错误直接输出到模板。</p><p>如果为 <code>true</code>，则将引发错误，抛出到<code>Node.js</code> 进程中，可能会使您的应用程序崩溃。</p><p><strong>autoescape:</strong> </p><p>默认true，强烈建议保持。</p><p>字符转换表请参阅转义过滤器。</p><p>true: HTML安全转义 </p><p>false: 不转义，除非使用转义过滤器或者转义标签</p><p><strong>js:</strong> </p><p><code>js</code>安全转义</p><p><strong>cache:</strong> </p><p>更改为 false 将重新编译每个请求的模板的文件。正式环境建议保持true。</p><p><strong>encoding:</strong> </p><p>模板文件编码</p><p><strong>root:</strong> </p><p>需要搜索模板的目录。如果模板传递给 swig.compileFile 绝对路径(以/开头)，Swig不会在模板root中搜索。如果传递一个数组，使用第一个匹配成功的数组项。</p><p><strong>tzOffset:</strong> </p><p>设置默认时区偏移量。此设置会使转换日期过滤器会自动的修正相应时区偏移量。</p><p><strong>filters:</strong> </p><p>自定义过滤器或者重写默认过滤器，参见自定义过滤器指南。</p><p><strong>tags</strong> </p><p>自定义标签或者重写默认标签，参见自定义标签指南。</p><p><strong>extensions</strong></p><p>添加第三方库，可以在编译模板时使用，参见参见自定义标签指南。</p><h3 id="nodejs用法"><a href="#nodejs用法" class="headerlink" title="nodejs用法"></a>nodejs用法</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> tpl <span class="token operator">=</span> swig<span class="token punctuation">.</span><span class="token function">compileFile</span><span class="token punctuation">(</span><span class="token string">"path/to/template/file.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> renderedHtml <span class="token operator">=</span> tpl<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> vars<span class="token punctuation">:</span> <span class="token string">'to be inserted in template'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>or</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> tpl <span class="token operator">=</span> swig<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"Template string here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> renderedHtml <span class="token operator">=</span> <span class="token function">tpl</span><span class="token punctuation">(</span><span class="token punctuation">{</span> vars<span class="token punctuation">:</span> <span class="token string">'to be inserted in template'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="结合Express"><a href="#结合Express" class="headerlink" title="结合Express"></a>结合Express</h3><pre class=" language-javascript"><code class="language-javascript">    npm install express    npm install consolidate</code></pre><p>然后</p><pre class=" language-javascript"><code class="language-javascript">    app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'.html'</span><span class="token punctuation">,</span> cons<span class="token punctuation">.</span>swig<span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>Swig浏览器版本的api基本与nodejs版相同，不同点如下：</p><p>不能使用swig.compileFile，浏览器没有文件系统</p><p>你必须提前使用swig.compile编译好模板</p><p>按顺序使用<code>extends</code>, <code>import</code>, and <code>include</code>，同时在<code>swig.compile</code>里使用参数<code>templateKey</code>来查找模板</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> template <span class="token operator">=</span> swig<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;p>{% block content %}{% endblock %}&lt;/p>'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> filename<span class="token punctuation">:</span> <span class="token string">'main'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mypage <span class="token operator">=</span> swig<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">'{% extends "main" %}{% block content %}Oh hey there!{% endblock %}'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> filename<span class="token punctuation">:</span> <span class="token string">'mypage'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="swig的变量"><a href="#swig的变量" class="headerlink" title="swig的变量:"></a>swig的变量:</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> foo<span class="token punctuation">.</span>bar <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果变量未定义，输出空字符。</span></code></pre><p>或</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token punctuation">{</span> foo<span class="token punctuation">[</span><span class="token string">'bar'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果变量未定义，输出空字符。</span></code></pre><h3 id="swig的标签："><a href="#swig的标签：" class="headerlink" title="swig的标签："></a>swig的标签：</h3><h4 id="extends："><a href="#extends：" class="headerlink" title="extends："></a>extends：</h4><ul><li>使当前模板继承父模板，必须在文件最前</li><li>参数： file父模板相对模板root的相对路径，将在后面介绍如何实现模板继承。</li></ul><h4 id="block："><a href="#block：" class="headerlink" title="block："></a>block：</h4><ul><li>定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块，在继承<code>block</code>块时可以使用父模板中已定义的部分 </li><li>参数： name块的名字，必须以字母数字下划线开头</li></ul><h4 id="parent："><a href="#parent：" class="headerlink" title="parent："></a>parent：</h4><ul><li><p>将父模板中同名块注入当前块中</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> block head <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token operator">%</span> parent <span class="token operator">%</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"custom.css"</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span> </code></pre></li></ul><h4 id="include："><a href="#include：" class="headerlink" title="include："></a>include：</h4><ul><li><p>包含一个模板到当前位置，这个模板将使用当前上下文 </p></li><li><p>参数： file包含模板相对模板 root 的相对路径 </p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> include <span class="token string">"a.html"</span> <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> include <span class="token string">"template.js"</span> <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//将引入的文件内容放到被引用的地方</span></code></pre><h4 id="raw："><a href="#raw：" class="headerlink" title="raw："></a>raw：</h4></li><li><p>停止解析标记中任何内容，所有内容都将输出</p></li><li><p>参数： file父模板相对模板 root 的相对路径</p></li></ul><h4 id="for："><a href="#for：" class="headerlink" title="for："></a>for：</h4><ul><li><p>遍历对象和数组</p></li><li><p>参数：</p><p>  x：当前循环迭代名；</p><p>  in:语法标记；</p><p>  y:可迭代对象。</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> y <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre></li><li><p>特殊循环变量 </p><p>  <code>loop.index</code>：当前循环的索引（1开始） </p><p>  <code>loop.index0</code>：当前循环的索引（0开始） </p><p>  <code>loop.revindex</code>：当前循环从结尾开始的索引（1开始）</p><p>  <code>loop.revindex0</code>：当前循环从结尾开始的索引（0开始） </p><p>  <code>loop.key</code>：如果迭代是对象，是当前循环的键，否则同 loop.index </p><p>  <code>loop.first</code>：如果是第一个值返回 true </p><p>  <code>loop.last</code>：如果是最后一个值返回 true </p><p>  <code>loop.cycle</code>：一个帮助函数，以指定的参数作为周期</p></li></ul><h5 id="example："><a href="#example：" class="headerlink" title="example："></a>example：</h5><ul><li><p>eg1——————————</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> y <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> loop<span class="token punctuation">.</span>first <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> loop<span class="token punctuation">.</span>index <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> loop<span class="token punctuation">.</span>key <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> x <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> loop<span class="token punctuation">.</span>last <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre></li><li><p>eg2 ——————————</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> items <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{{ loop.cycle('odd', 'even') }}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre></li><li><p>eg3—————————–</p></li></ul><h5 id="在-for-标签里使用-else"><a href="#在-for-标签里使用-else" class="headerlink" title="在 for 标签里使用 else"></a>在 for 标签里使用 else</h5><ul><li><p>eg—————————–</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> person <span class="token keyword">in</span> people <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> person <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>        There are no people yet<span class="token operator">!</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h4 id="if：条件语句"><a href="#if：条件语句" class="headerlink" title="if：条件语句"></a>if：条件语句</h4></li><li><p>参数：接受任何有效的JavaScript条件语句</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token operator">!</span>x <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> not x <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x and y <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x or y <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token operator">||</span> y <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token operator">||</span> <span class="token punctuation">(</span>y <span class="token operator">&amp;&amp;</span> z<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h5 id="example：-1"><a href="#example：-1" class="headerlink" title="example："></a>example：</h5></li></ul><ul><li><p>if else 和 else if</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> foo <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Some content.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> elseif <span class="token string">"foo"</span> <span class="token keyword">in</span> bar <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Content if the array `bar` has "foo" in it.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token operator">%</span><span class="token punctuation">}</span>        Fallback content<span class="token punctuation">.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token punctuation">[</span>operator<span class="token punctuation">]</span> y <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Operators: ==, !=, &lt;, &lt;=, >, >=, ===, !==</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'five'</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//The operands can be also be string or number literals</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x<span class="token operator">|</span>length <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//You can use filters on any operand in the statement.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> x <span class="token keyword">in</span> y <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//If x is a value that is present in y, this will return true.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h4 id="autoescape："><a href="#autoescape：" class="headerlink" title="autoescape："></a>autoescape：</h4></li><li><p>改变当前变量的自动转义行为 </p></li><li><p>参数： </p><p>  on：当前内容是否转义</p><p>  type: 转义类型，js 或者 html，默认 html</p></li><li><p>example:</p><pre class=" language-javascript"><code class="language-javascript">  input <span class="token operator">=</span> <span class="token string">'&lt;p>Hello "you" &amp; /'</span>them<span class="token operator">/</span><span class="token string">'&lt;/p>'</span><span class="token punctuation">;</span>  <span class="token punctuation">{</span><span class="token operator">%</span> autoescape <span class="token boolean">false</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> input <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endautoescape <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// &lt;p>Hello "you" &amp; 'them'&lt;/p></span>  <span class="token punctuation">{</span><span class="token operator">%</span> autoescape <span class="token boolean">true</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> input <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endautoescape <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//&lt;p>Hello "you" &amp; 'them' &lt;/p></span>  <span class="token punctuation">{</span><span class="token operator">%</span> autoescape <span class="token boolean">true</span> <span class="token string">"js"</span> <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span> input <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endautoescape <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// /u003Cp/u003EHello /u0022you/u0022 &amp; /u0027them/u0027/u003C/u005Cp/u003E </span></code></pre></li></ul><h4 id="set"><a href="#set" class="headerlink" title="set:"></a>set:</h4><ul><li><p>设置一个变量，在当前上下文中复用</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">set</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">%</span><span class="token punctuation">}</span>   <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> foo <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> num <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>     <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span> </code></pre></li></ul><h4 id="filter"><a href="#filter" class="headerlink" title="filter:"></a>filter:</h4><ul><li><p>对整个块应用过滤器</p></li><li><p>参数：</p></li><li><p>  filter_name: 过滤器名字 </p><p>  若干传给过滤器的参数 父模板相对模板 root 的相对路径</p></li><li><p>example:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> filter uppercase <span class="token operator">%</span><span class="token punctuation">}</span>oh hi<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> filter replace <span class="token string">"."</span> <span class="token string">"!"</span> <span class="token string">"g"</span> <span class="token operator">%</span><span class="token punctuation">}</span>Hi<span class="token punctuation">.</span> My name is Paul<span class="token punctuation">.</span><span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span>  输出  OH HI<span class="token punctuation">,</span> PAUL  Hi<span class="token operator">!</span> My name is Paul<span class="token operator">!</span></code></pre><h4 id="spaceless"><a href="#spaceless" class="headerlink" title="spaceless:"></a>spaceless:</h4></li><li><p>尝试移除html标签间的空格</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> spaceless <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> foo <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> loop<span class="token punctuation">.</span>index <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endspaceless <span class="token operator">%</span><span class="token punctuation">}</span>  输出  <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span></code></pre><h4 id="import"><a href="#import" class="headerlink" title="import:"></a>import:</h4></li><li><p>允许引入另一个模板的宏进入当前上下文</p></li><li><p>参数：</p><p>  file: 引入模板相对模板 root 的相对路径 </p><p>  as: 语法标记 var: 分配给宏的可访问上下文对象</p></li><li><p>expample:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">import</span> <span class="token string">'formmacros.html'</span> <span class="token keyword">as</span> form <span class="token operator">%</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//{ this will run the input macro }</span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> form<span class="token punctuation">.</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//{ this, however, will NOT output anything because the macro is scoped to the "form" object: }</span>  <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="macro"><a href="#macro" class="headerlink" title="macro:"></a>macro:</h4><ul><li><p>创建自定义可服用的代码段</p></li><li><p>参数：…</p></li><li><p>用户定义</p></li><li><p>example:</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token punctuation">{</span><span class="token operator">%</span> macro input type name id label value error <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"{{ name }}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> label <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"{{ type }}"</span> name<span class="token operator">=</span><span class="token string">"{{ name }}"</span> id<span class="token operator">=</span><span class="token string">"{{ id }}"</span> value<span class="token operator">=</span><span class="token string">"{{ value }}"</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> error <span class="token operator">%</span><span class="token punctuation">}</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"error"</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endmacro <span class="token operator">%</span><span class="token punctuation">}</span></code></pre></li><li><p>然后像下面使用</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token punctuation">{</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"fname"</span><span class="token punctuation">,</span> <span class="token string">"fname"</span><span class="token punctuation">,</span> <span class="token string">"First Name"</span><span class="token punctuation">,</span> fname<span class="token punctuation">.</span>value<span class="token punctuation">,</span> fname<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>      <span class="token punctuation">{</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">,</span> <span class="token string">"lname"</span><span class="token punctuation">,</span> <span class="token string">"lname"</span><span class="token punctuation">,</span> <span class="token string">"Last Name"</span><span class="token punctuation">,</span> lname<span class="token punctuation">.</span>value<span class="token punctuation">,</span> lname<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre></li></ul><p>输出如下</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"fname"</span><span class="token operator">></span>First Name<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"fname"</span> id<span class="token operator">=</span><span class="token string">"fname"</span> value<span class="token operator">=</span><span class="token string">"Paul"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"lname"</span><span class="token operator">></span>Last Name<span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"lname"</span> id<span class="token operator">=</span><span class="token string">"lname"</span> value<span class="token operator">=</span><span class="token string">""</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"error"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h2 id="变量过滤器"><a href="#变量过滤器" class="headerlink" title="变量过滤器"></a>变量过滤器</h2><ul><li><p>用于修改变量。变量名称后用 | 字符分隔添加过滤器。您可以添加多个过滤器。</p></li><li><p>example</p></li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">{</span><span class="token punctuation">{</span> name<span class="token operator">|</span>title <span class="token punctuation">}</span><span class="token punctuation">}</span> was born on <span class="token punctuation">{</span><span class="token punctuation">{</span> birthday<span class="token operator">|</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">'F jS, Y'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> and has <span class="token punctuation">{</span><span class="token punctuation">{</span> bikes<span class="token operator">|</span>length<span class="token operator">|</span><span class="token keyword">default</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> bikes<span class="token punctuation">.</span></code></pre><ul><li>也可以使用 filter 标签来为块内容添加过滤器</li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">{</span><span class="token operator">%</span> filter upper <span class="token operator">%</span><span class="token punctuation">}</span>    oh hi<span class="token punctuation">,</span> paul    <span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h3 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h3><p><strong>add(value)</strong></p><p>使变量与<code>value</code>相加，可以转换为数值字符串会自动转换为数值。</p><p><strong>addslashes</strong> </p><p>用 <code>\</code> 转义字符串</p><p><strong>capitalize</strong> </p><p>大写首字母</p><p><strong>date(format[, tzOffset])</strong> </p><ul><li><p>转换日期为指定格式</p><pre class=" language-javascript"><code class="language-javascript">  format： 格式   tzOffset： 时区</code></pre></li></ul><p><strong>default(value)</strong> </p><p>默认值（如果变量为<code>undefined</code>，<code>nul</code>l，<code>false</code>）</p><p><strong>e</strong></p><p>同<code>escape</code></p><p><strong>escape([type])</strong> </p><pre class=" language-javascript"><code class="language-javascript">    转义字符    默认： <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">,</span> <span class="token operator">></span><span class="token punctuation">,</span> "<span class="token punctuation">,</span> '     js<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span><span class="token punctuation">,</span> <span class="token operator">></span><span class="token punctuation">,</span> "<span class="token punctuation">,</span> '<span class="token punctuation">,</span> <span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> <span class="token punctuation">;</span></code></pre><p><strong>first</strong> </p><p>返回数组第一个值</p><p><strong>join(glue)</strong> </p><p>同<code>[].join</code></p><p><strong>json_encode([indent])</strong> </p><p>类似<code>JSON.stringify</code>, <code>indent</code>为缩进空格数</p><p><strong>last</strong> </p><p>返回数组最后一个值</p><p><strong>length</strong> </p><p>返回变量的<code>length</code>，如果是<code>object</code>，返回<code>key</code>的数量</p><p><strong>lower</strong> </p><p>同<code>xxx.toLowerCase()</code></p><p><strong>raw</strong> </p><p>指定输入不会被转义</p><p><strong>replace(search, replace[, flags])</strong> </p><p>同<code>**xxx.replacexxx</code></p><p><strong>reverse</strong> </p><p>翻转数组</p><p><strong>striptags</strong> </p><p>去除<code>html/xm</code>l标签</p><p><strong>title</strong> </p><p>大写首字母</p><p><strong>uniq</strong> </p><p>数组去重</p><p><strong>upper</strong> </p><p>同<code>xxx.toUpperCase</code></p><p><strong>url_encode</strong> </p><p>同<code>encodeURIComponent</code></p><p><strong>url_decode</strong> </p><p>同<code>decodeURIComponemt</code></p><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>创建一个 myfilter.js 然后引入到 Swig的初始化函数中</p><pre class=" language-javascript"><code class="language-javascript">    swig<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>        <span class="token punctuation">{</span> filters<span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'myfilters'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 myfilter.js 里，每一个<code>filter</code>方法都是一个简单的 js方法，下例是一个翻转字符串的 <code>filter</code>：</p><pre class=" language-javascript"><code class="language-javascript">    exports<span class="token punctuation">.</span>myfilter <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sphelit</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>你的 <code>filter</code> 一旦被引入，你就可以向下面一样使用：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">{</span><span class="token punctuation">{</span> name<span class="token operator">|</span>myfilter <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> filter myfilter <span class="token operator">%</span><span class="token punctuation">}</span>        I shall be filtered    <span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>你也可以像下面一样给 <code>filter</code> 传参数：</p><pre class=" language-javascript"><code class="language-javascript">    exports<span class="token punctuation">.</span>prefix <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> prefix<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> input<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> name<span class="token operator">|</span><span class="token function">prefix</span><span class="token punctuation">(</span><span class="token string">'my prefix'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> filter prefix <span class="token string">'my prefix'</span> <span class="token operator">%</span><span class="token punctuation">}</span>        I will be prefixed <span class="token keyword">with</span> <span class="token string">"my prefix"</span><span class="token punctuation">.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> filter prefix foo <span class="token operator">%</span><span class="token punctuation">}</span>        I will be prefixed <span class="token keyword">with</span> the value stored to <span class="token template-string"><span class="token string">`foo`</span></span><span class="token punctuation">.</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfilter <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承:"></a>模板继承:</h3><h4 id="Swig-使用-extends-和-block-来实现模板继承"><a href="#Swig-使用-extends-和-block-来实现模板继承" class="headerlink" title="Swig 使用 extends 和 block 来实现模板继承"></a>Swig 使用 extends 和 block 来实现模板继承</h4><ul><li>example:</li></ul><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//layout.html</span>    <span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">></span>    <span class="token operator">&lt;</span>html<span class="token operator">></span>        <span class="token operator">&lt;</span>head<span class="token operator">></span>            <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>title<span class="token operator">></span>                <span class="token punctuation">{</span><span class="token operator">%</span> block title <span class="token operator">%</span><span class="token punctuation">}</span>                    My Site                <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token operator">%</span> block head <span class="token operator">%</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>body<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token operator">%</span> block content <span class="token operator">%</span><span class="token punctuation">}</span>            <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span> </code></pre><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//index.html</span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">extends</span> <span class="token string">'./layout.html'</span> <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> block title <span class="token operator">%</span><span class="token punctuation">}</span>        My Page    <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> block head <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token operator">%</span> parent <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span>    <span class="token punctuation">{</span><span class="token operator">%</span> block content <span class="token operator">%</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>This is just an awesome page<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello<span class="token punctuation">,</span>lego<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>        <span class="token operator">&lt;</span>script<span class="token operator">></span>            <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pages/index/main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endblock <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h4 id="swig模板经过编译后："><a href="#swig模板经过编译后：" class="headerlink" title="swig模板经过编译后："></a>swig模板经过编译后：</h4><pre class=" language-javascript"><code class="language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span>doctype html<span class="token operator">></span>    <span class="token operator">&lt;</span>html<span class="token operator">></span>        <span class="token operator">&lt;</span>head<span class="token operator">></span>            <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>title<span class="token operator">></span>My Page<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>body<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>This is just an awesome page<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>h1<span class="token operator">></span>hello<span class="token punctuation">,</span>lego<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>test<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>            <span class="token operator">&lt;</span>script<span class="token operator">></span>                <span class="token comment" spellcheck="true">//require('pages/index/main');</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h3 id="swig模板在fis3中的应用"><a href="#swig模板在fis3中的应用" class="headerlink" title="swig模板在fis3中的应用"></a>swig模板在fis3中的应用</h3><ul><li><p>swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。</p></li><li><p>如上个例子，可以将公用代码写在一个文件里，作为母版页，需要的页面就继承这个页面，而且页面中的block又可以方便我们自定义需要的内容。<br>在fis3构建中使用时，调用swig编译插件，将swig标签解析成正常的html文件即可。</p></li><li><p>gitHubDemo:<a href="https://github.com/duanweiqiang/web">https://github.com/duanweiqiang/web</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 全站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodeJS </tag>
            
            <tag> express </tag>
            
            <tag> swig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用命令</title>
      <link href="2020/02/12/git-use/"/>
      <url>2020/02/12/git-use/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 配置教程</title>
      <link href="2020/02/12/hello-world/"/>
      <url>2020/02/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>原博客出处：<a href="https://segmentfault.com/a/1190000017986794">https://segmentfault.com/a/1190000017986794</a><br>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。</p><p>这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>准备 node 和 git 环境，<br>首先，安装 NodeJS，因为 Hexo 是基于 Node.js 驱动的一款博客框架，相比起前面提到过的 Jekyll 框架更快更简洁，因为天*朝网络被墙的原因尝试过安装 Jekyll 失败而放弃了。<br>然后，安装 git，一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。如果 Git 还不熟悉可以参考廖雪峰大神的 Git 教程。</p><p>两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windowns）或者终端（Mac），下方中将统一称为命令行。<br>在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。</p><pre><code>git versionnode -vnpm -v</code></pre><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 Hexo 的详细文档。<br>在命令行输入执行以下命令：</p><pre><code>npm install -g hexo-cli</code></pre><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre><code>hexo init myBlog//文件夹名，可自定义cd myBlognpm install</code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code>.├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 ├── package.json├── scaffolds # 模版文件夹├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹|   ├── _drafts # 草稿文件|   └── _posts # 文章Markdowm文件 └── themes  # 主题文件夹</code></pre><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href="http://localhost:4000">http://localhost:4000</a> 回车就可以预览效果了。</p><pre><code>hexo s或者 hexo server</code></pre><p>至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。</p><h2 id="注册-Github"><a href="#注册-Github" class="headerlink" title="注册 Github"></a>注册 Github</h2><p>（自行baidu、google）</p><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><p>点击 Start project 或者下面的 new repository 创建一个新的仓库</p><ul><li>注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。</li><li>这里有个硬性要求：repository的名称必须要”用户名.github.io”</li></ul><h2 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h2><p>要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。</p><p>打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。</p><pre><code>cat ~/.ssh/id_rsa.pub</code></pre><h3 id="如果之前没有创建，则执行以下命令全局配置一下本地账户："><a href="#如果之前没有创建，则执行以下命令全局配置一下本地账户：" class="headerlink" title="如果之前没有创建，则执行以下命令全局配置一下本地账户："></a>如果之前没有创建，则执行以下命令全局配置一下本地账户：</h3><pre><code>git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱地址&quot;</code></pre><p>然后开始生成密钥 SSH key</p><pre><code>ssh-keygen -t rsa -C &#39;上面的邮箱&#39;</code></pre><p>按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key</p><p>-首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。</p><pre><code>ssh -T git@github.com</code></pre><p>到这还没完，还要登录 Github 上添加刚刚生成的SSH key(自行baidu、google)；</p><h2 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h2><p>此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。<br>先不着急，部署之前还需要修改配置和安装部署插件。</p><p>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</p><pre><code>deploy:  type: git  repo:     github: https://github.com/duanweiqiang/duanweiqiang.github.io.git  branch: master</code></pre><p>第二：要安装一个部署插件 hexo-deployer-git。</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p><pre><code>hexo g -d//生成静态文件并部署到GitHub</code></pre><p>稍等一会，在浏览器访问网址： https://你的用户名.github.io 就会看到你的博客啦！！</p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>//博客名文件夹</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="使用-Generate-命令生成-static-files"><a href="#使用-Generate-命令生成-static-files" class="headerlink" title="使用 Generate 命令生成 static files"></a>使用 Generate 命令生成 static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate/hexo g</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="将本地命令推送到git仓库"><a href="#将本地命令推送到git仓库" class="headerlink" title="将本地命令推送到git仓库"></a>将本地命令推送到git仓库</h3><pre class=" language-bash"><code class="language-bash">$ hexo clean$ hexo deploy/hexo g -d</code></pre><p>部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><h2 id="静态图床"><a href="#静态图床" class="headerlink" title="静态图床"></a>静态图床</h2><p>文章里用的一些图片放哪里比较好呢？比对了几个免费的图床七牛、sm.ms和微博图床，最后我决定选用微博的，七牛的好像最近是测试域名不能用了，虽然有解决方案，但怕以后还会有其他问题，所以放弃啦，毕竟免费的东西才是最贵的，特别像云储存这种东西，感觉都是钱钱钱，哈哈哈，万一有一天不让用就比较麻烦了，另外sm.ms这个口碑也不错，好像是个人开发的，免费好几年了，有同样的担心就放弃了，最好抱了新浪的大腿，感觉新浪应该会靠谱一点吧，唯一的问题就是如果有一天新浪禁止外链的话就不行了，再看吧。</p><p>可以去chrome网上应用商店下载一个叫微博图床的chrome插件，下图是插件的界面，操作简单方便，具体使用看说明就可以啦，比较简单，这样图床的问题就解决了。</p><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔方还原方法</title>
      <link href="2020/01/13/moFang/"/>
      <url>2020/01/13/moFang/</url>
      
        <content type="html"><![CDATA[<h2 id="魔方还原"><a href="#魔方还原" class="headerlink" title="魔方还原"></a>魔方还原</h2><p>三阶魔方还原的原则是，分层还原发，即先还原第一层，再第二层第三层的原则。<br>下面我们详细介绍各层的还原方法</p><h3 id="第一层还原"><a href="#第一层还原" class="headerlink" title="第一层还原"></a>第一层还原</h3><ul><li><p>第一层还原是最简单的，网上的方法也是有很多种，不用方法自己也可以实现，我们这里就不做讲解</p></li><li><p>这里给大家推介几个链接，有必要就自行查考</p><p>  1.<a href="https://baijiahao.baidu.com/s?id=1586020045673476817&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1586020045673476817&amp;wfr=spider&amp;for=pc</a><br>  2.<a href="https://www.bilibili.com/video/av45061142">https://www.bilibili.com/video/av45061142</a></p></li></ul><h3 id="第二层还原"><a href="#第二层还原" class="headerlink" title="第二层还原"></a>第二层还原</h3><ul><li>第二层的原则是倒T字型方法</li></ul><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1geavh81reuj208a08h74p.jpg" alt="示例.png"></p><blockquote><p><strong><em>先逼逼一下口诀里的规则：</em></strong><br>U：代表 up 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U’：代表up 逆时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;U2：代表up 顺时针转 180度<br>R：代表 right 顺时针转 90度&nbsp;&nbsp;R’：代表 right 逆时针转 90度<br>L：代表 left 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;L’：代表 left 逆时针转 90度<br>F：代表 face 顺时针转 90度&nbsp;&nbsp;&nbsp;F’：代表 face 逆时针转 90度</p></blockquote><p>通过以下两种就可以实现第二层</p><h4 id="1-情况一"><a href="#1-情况一" class="headerlink" title="(1)情况一"></a>(1)情况一</h4><blockquote><p>口诀：U -&gt; R -&gt; U’ -&gt; R’ -&gt; U’ -&gt; F’ -&gt; U -&gt; F</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1geavamcwvyj208o08jaaf.jpg" alt="第二层还原 1.png"></p><h4 id="2-情况二"><a href="#2-情况二" class="headerlink" title="(2)情况二"></a>(2)情况二</h4><blockquote><p>口诀：U’  F’  U  F  U  R  U’  R’</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1geav9buapsj208a08h3yx.jpg" alt="第二层还原 2.png"></p><h4 id="第二层成品"><a href="#第二层成品" class="headerlink" title="第二层成品"></a>第二层成品</h4><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1geavqtrpo6j206y081aae.jpg" alt="第二层成品 3.png"></p><h3 id="第三层还原"><a href="#第三层还原" class="headerlink" title="第三层还原"></a>第三层还原</h3><p>第三层一共分4个步骤来还原</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><blockquote><p>该步骤是实现顶部出现“+”格子，其他色块不考虑<br>口诀：F -&gt; U -&gt; R -&gt; U’ -&gt; R’ -&gt; F’</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1gebkyytazvj20zy0ceafg.jpg" alt="十字.jpg"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><blockquote><p>该步骤是实现顶部面同色，其他侧面色块不考虑<br>口诀：R’ -&gt; U’ -&gt; R -&gt; U’ -&gt; R’ -&gt; U2 -&gt; R<br>该步骤需要注意的是，但使用上面步骤出现顶部面是“小鱼”的情况后，再以下图中的方位继续进行上面的公式直到顶部面为同样的色</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1geaw0pin1gj21140cuwlc.jpg" alt="顶部面.png"></p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><blockquote><p>该步骤是实现魔方的顶角互换，其他侧面色块不考虑<br>口诀：R -&gt; U2 -&gt; R’ -&gt; U’ -&gt; R -&gt; U2 -&gt; L’ -&gt; U -&gt; R’ -&gt; U’ -&gt; L</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1geaw5q1g09j206y07iq3a.jpg" alt="顶角互换.png"></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><blockquote><p>该步骤是实现魔方的棱互换，其他侧面色块不考虑<br>本不走下图有点问题。face面有变化<br>口诀：F2 -&gt; U -&gt; L -&gt; R’ -&gt; F2 -&gt; L’ -&gt; R -&gt; U -&gt; F2</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1gebl80p7k0j206z07ldga.jpg" alt="棱互换.png"></p><ul><li>综合上步就可以实现魔方还原了。小伙伴们还不快试一下💪💪💪。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 人文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车牌编号规则</title>
      <link href="2019/03/14/prvoceCode/"/>
      <url>2019/03/14/prvoceCode/</url>
      
        <content type="html"><![CDATA[<h2 id="中国车牌号码规则"><a href="#中国车牌号码规则" class="headerlink" title="中国车牌号码规则"></a>中国车牌号码规则</h2><h3 id="一、车牌号码规则"><a href="#一、车牌号码规则" class="headerlink" title="一、车牌号码规则"></a>一、车牌号码规则</h3><h4 id="1-1-民用车牌规则"><a href="#1-1-民用车牌规则" class="headerlink" title="1.1 民用车牌规则"></a>1.1 民用车牌规则</h4><h3 id="普通车牌（蓝牌、黄牌）"><a href="#普通车牌（蓝牌、黄牌）" class="headerlink" title="普通车牌（蓝牌、黄牌）"></a>普通车牌（蓝牌、黄牌）</h3><p>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">省份简称</td><td align="center">发证机关代码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><ul><li>黑底白字是外资企业的车</li></ul><p>省份简称：<br>京 津 晋 冀 蒙 辽 吉 黑 沪 苏 浙 皖 闽 赣 鲁 豫 鄂 湘 粤 桂 琼 渝 川 贵 云 藏 陕 甘 青 宁 新</p><p>发证机关代码：</p><p>ABCDEFGH JKLMN PQRSTUVWXY </p><ul><li>说明：无 I, O , Z 三个字母。其中O和Z属于特殊车牌类型，见其它类型说明。</li></ul><p>车牌号码：</p><p>数字：0123456789</p><p>字母：ABCDEFGH JKLNM PQRSTUVWXY</p><p>说明：无 I, O 字母；</p><h3 id="新能源车牌"><a href="#新能源车牌" class="headerlink" title="新能源车牌"></a>新能源车牌</h3><p>车牌号码长度：8 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th><th align="center">第8位</th></tr></thead><tbody><tr><td align="center">省份</td><td align="center">发证机关</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><p>新能源车牌现阶段号码长度为8位，按照现行新能源车牌号码规则：</p><p>第3位：1-9DF</p><p>第4位：1-9A-Z，无I、O字母；</p><p>第5-7位：0-9</p><p>第8位：1-9DF</p><p>严格校验新能源车牌号码的约束规则：</p><p>当第3位为D/F时，第4位可字母和数字，第5-8位必须纯数字；</p><p>当第8位为D/F时，第3-7位必须纯数字；</p><h3 id="1-2-民用特殊车牌规则"><a href="#1-2-民用特殊车牌规则" class="headerlink" title="1.2 民用特殊车牌规则"></a>1.2 民用特殊车牌规则</h3><p><strong>港澳车牌</strong><br>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">粤</td><td align="center">Z</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">[港澳]</td></tr></tbody></table><p>第1、2位分别是“粤Z”，第7位为“港澳”。</p><p><strong>教练车 - 学</strong><br>教练车号牌的第7位固定为“学”字，其它号码与普通民用车牌一致；</p><p><strong>拖挂车 - 挂</strong><br>拖挂车的车厢，其号牌的第7位固定为“挂”字，其它号码与普通民用车牌一致；</p><p><strong>其它可能出现的字符：领试超练</strong><br>其号牌的第7位固定为“领试超练”某个字，其它号码与普通民用车牌一致；</p><p><strong>民航内部车牌</strong><br>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">民</td><td align="center">航</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><p><strong>使馆车牌</strong><br>车牌号码长度：7 位</p><ul><li>新式使馆车牌号码格式：</li></ul><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">[1-3]</td><td align="center">数字</td><td align="center">数字</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">使</td></tr></tbody></table><ul><li>旧式使馆车牌号码格式：</li></ul><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">使</td><td align="center">[1-3]</td><td align="center">数字</td><td align="center">数字</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><p>这个类型的车牌于2017年5月左右取消，更换成新式使馆车牌。参见新闻链接:<a href="http://society.cnr.cn/js/20170214/t20170214_523597660.html">http://society.cnr.cn/js/20170214/t20170214_523597660.html</a></p><h3 id="1-3-警队车牌规则"><a href="#1-3-警队车牌规则" class="headerlink" title="1.3 警队车牌规则"></a>1.3 警队车牌规则</h3><p>警队车牌包括四种车牌：</p><p>地方武警车牌；</p><p>武警总队车牌；</p><p>普通警察车牌；</p><p>O字警察车牌；</p><p><strong>地方武警车牌</strong><br>车牌号码长度：8 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th><th align="center">第8位</th></tr></thead><tbody><tr><td align="center">W</td><td align="center">J</td><td align="center">省份简称</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><ul><li>其中号码字段，保持与普通车牌号码一致。</li></ul><p>参考资料：武警部队于6月1日正式启用新式车辆牌证</p><p>例如：</p><ul><li>WJ京12345 </li><li>WJ粤12345</li></ul><p><strong>武警总队车牌</strong><br>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">W</td><td align="center">J</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><ul><li>其中号码字段，保持与普通车牌号码一致。</li></ul><p>例如：</p><ul><li>WJ1234J</li><li>WJ95001</li></ul><p><strong>普通警察车牌</strong><br>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">省份</td><td align="center">发证机关</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">警</td></tr></tbody></table><ul><li>其中第7位固定为“警”字，其它位置与普通车牌号码一致；</li></ul><p><strong>O字车牌</strong><br>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">省份</td><td align="center">O</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><ul><li>其中第1位固定为字母“O”，其它位置与普通车牌号码一致。</li></ul><p>注：此类似车牌已基本在全国范围内取消，但部分地区仍有使用情况。</p><h3 id="1-4-军队车牌规则"><a href="#1-4-军队车牌规则" class="headerlink" title="1.4 军队车牌规则"></a>1.4 军队车牌规则</h3><p>车牌号码长度：7 位</p><p>车牌号码格式：</p><table><thead><tr><th align="center">第1位</th><th align="center">第2位</th><th align="center">第3位</th><th align="center">第4位</th><th align="center">第5位</th><th align="center">第6位</th><th align="center">第7位</th></tr></thead><tbody><tr><td align="center">军区军种代码</td><td align="center">单位代码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td><td align="center">号码</td></tr></tbody></table><p>军区代码：</p><p>QVKHBSLJNGCEZ</p><p>代表各大军区、总部、军种：</p><p>Q 战区首字母（新式）</p><p>VKHBSLJNGCEZ 旧式军区车牌前缀。后期根据军队车牌情况可能只保存“Q”字母。</p><p>单位代码：</p><p>与普通民用车牌发证机关代码的字母一致，未做严格限制。</p><h2 id="二、统计表"><a href="#二、统计表" class="headerlink" title="二、统计表"></a>二、统计表</h2><p><img src="http://ww1.sinaimg.cn/large/987eaf20ly1ge50m1n52rj21390o1gsf.jpg" alt="IMG_3445.JPG"></p>]]></content>
      
      
      <categories>
          
          <category> 人文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 常识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
